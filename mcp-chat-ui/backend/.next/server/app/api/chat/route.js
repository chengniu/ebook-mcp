/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_onebird_github_ebook_mcp_mcp_chat_ui_backend_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/onebird/github/ebook-mcp/mcp-chat-ui/backend/src/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_onebird_github_ebook_mcp_mcp_chat_ui_backend_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/chat/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_security__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/security */ \"(rsc)/./src/lib/security.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\n/* harmony import */ var _lib_initialization__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/initialization */ \"(rsc)/./src/lib/initialization.ts\");\n/* harmony import */ var _services_LLMService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/services/LLMService */ \"(rsc)/./src/services/LLMService.ts\");\n/* harmony import */ var _services_SessionManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/services/SessionManager */ \"(rsc)/./src/services/SessionManager.ts\");\n/* harmony import */ var _services_ChatProcessor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/services/ChatProcessor */ \"(rsc)/./src/services/ChatProcessor.ts\");\n\n\n\n\n\n\n\n\nasync function chatHandler(request) {\n    if (request.method !== 'POST') {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Method not allowed',\n            sessionId: '',\n            message: 'Only POST method is allowed'\n        }, {\n            status: 405\n        });\n    }\n    console.log('Processing chat request');\n    // Ensure backend is initialized\n    await (0,_lib_initialization__WEBPACK_IMPORTED_MODULE_4__.ensureInitialized)();\n    const body = await request.json();\n    const chatRequest = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_3__.validateChatRequest)(body);\n    // Extract additional parameters from request body\n    const { apiKey, baseUrl, systemPrompt, temperature, maxTokens, availableTools } = body;\n    // Note: API key is now retrieved securely from backend storage, not from frontend\n    console.log('🔧 Backend received provider:', chatRequest.provider);\n    console.log('🤖 Backend received model:', chatRequest.model);\n    // Get API key from secure settings manager (never from frontend)\n    let actualApiKey;\n    try {\n        const { getSecureSettingsManager } = await __webpack_require__.e(/*! import() */ \"_rsc_src_services_SecureSettingsManager_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/services/SecureSettingsManager */ \"(rsc)/./src/services/SecureSettingsManager.ts\"));\n        const settingsManager = getSecureSettingsManager();\n        await settingsManager.initialize();\n        // Find the provider configuration by matching provider name\n        const settings = await settingsManager.getSettings();\n        const provider = settings.llmProviders.find((p)=>p.name === chatRequest.provider && p.enabled);\n        if (!provider) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError(`No enabled ${chatRequest.provider} provider found. Please configure and enable a provider in settings.`);\n        }\n        actualApiKey = await settingsManager.getDecryptedApiKey(provider.id);\n        console.log('🔑 Retrieved API key from secure storage for provider:', chatRequest.provider);\n    } catch (error) {\n        console.error('❌ Failed to retrieve API key from secure storage:', error);\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('API key not found in secure storage. Please configure your API key in settings.');\n    }\n    // Validate API key\n    if (!actualApiKey || typeof actualApiKey !== 'string' || actualApiKey.trim().length === 0) {\n        console.error('❌ API key validation failed: missing or empty');\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('API key is required for chat requests');\n    }\n    // Basic API key format validation\n    if (actualApiKey.length < 10) {\n        console.error('❌ API key validation failed: too short');\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('API key appears to be invalid (too short)');\n    }\n    try {\n        // Create LLM service with user's configuration\n        const defaultConfig = (0,_services_LLMService__WEBPACK_IMPORTED_MODULE_5__.getDefaultProviderConfig)(chatRequest.provider);\n        const llmService = (0,_services_LLMService__WEBPACK_IMPORTED_MODULE_5__.createLLMService)({\n            provider: chatRequest.provider,\n            apiKey: actualApiKey,\n            baseUrl: baseUrl || defaultConfig.baseUrl,\n            model: chatRequest.model,\n            maxRetries: defaultConfig.maxRetries,\n            retryDelay: defaultConfig.retryDelay,\n            timeout: defaultConfig.timeout\n        });\n        // Get session manager\n        const sessionManager = (0,_services_SessionManager__WEBPACK_IMPORTED_MODULE_6__.getSessionManager)();\n        // Create chat processor\n        const chatProcessor = (0,_services_ChatProcessor__WEBPACK_IMPORTED_MODULE_7__.createChatProcessor)(llmService, sessionManager);\n        // Process the chat query\n        const response = await chatProcessor.processQuery({\n            messages: chatRequest.messages,\n            sessionId: chatRequest.sessionId,\n            provider: chatRequest.provider,\n            model: chatRequest.model,\n            availableTools: availableTools || [],\n            systemPrompt,\n            temperature,\n            maxTokens\n        });\n        const chatResponse = {\n            reply: response.reply,\n            toolCalls: response.toolCalls,\n            sessionId: response.sessionId\n        };\n        console.log(`Chat request processed successfully for session: ${response.sessionId}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(chatResponse);\n    } catch (error) {\n        console.error('Chat processing error:', error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n        const statusCode = error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError ? 400 : 500;\n        const chatResponse = {\n            sessionId: chatRequest.sessionId,\n            error: errorMessage\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(chatResponse, {\n            status: statusCode\n        });\n    }\n}\nconst POST = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.withSecurity)(chatHandler);\nconst OPTIONS = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.withSecurity)(async ()=>new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200\n    }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9jaGF0L3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDRztBQUNDO0FBQ1E7QUFDRTtBQUUwQjtBQUNyQjtBQUNDO0FBRS9ELGVBQWVTLFlBQVlDLE9BQWdCO0lBQ3pDLElBQUlBLFFBQVFDLE1BQU0sS0FBSyxRQUFRO1FBQzdCLE9BQU9YLHFEQUFZQSxDQUFDWSxJQUFJLENBQ3RCO1lBQUVDLE9BQU87WUFBc0JDLFdBQVc7WUFBSUMsU0FBUztRQUE4QixHQUNyRjtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7SUFFQUMsUUFBUUMsR0FBRyxDQUFDO0lBRVosZ0NBQWdDO0lBQ2hDLE1BQU1kLHNFQUFpQkE7SUFFdkIsTUFBTWUsT0FBTyxNQUFNVCxRQUFRRSxJQUFJO0lBQy9CLE1BQU1RLGNBQWNqQixvRUFBbUJBLENBQUNnQjtJQUV4QyxrREFBa0Q7SUFDbEQsTUFBTSxFQUNKRSxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsWUFBWSxFQUNaQyxXQUFXLEVBQ1hDLFNBQVMsRUFDVEMsY0FBYyxFQUNmLEdBQUdQO0lBRUosa0ZBQWtGO0lBQ2xGRixRQUFRQyxHQUFHLENBQUMsaUNBQWlDRSxZQUFZTyxRQUFRO0lBQ2pFVixRQUFRQyxHQUFHLENBQUMsOEJBQThCRSxZQUFZUSxLQUFLO0lBRTNELGlFQUFpRTtJQUNqRSxJQUFJQztJQUNKLElBQUk7UUFDRixNQUFNLEVBQUVDLHdCQUF3QixFQUFFLEdBQUcsTUFBTSxnT0FBMEM7UUFDckYsTUFBTUMsa0JBQWtCRDtRQUN4QixNQUFNQyxnQkFBZ0JDLFVBQVU7UUFFaEMsNERBQTREO1FBQzVELE1BQU1DLFdBQVcsTUFBTUYsZ0JBQWdCRyxXQUFXO1FBQ2xELE1BQU1QLFdBQVdNLFNBQVNFLFlBQVksQ0FBQ0MsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJLEtBQUtsQixZQUFZTyxRQUFRLElBQUlVLEVBQUVFLE9BQU87UUFFN0YsSUFBSSxDQUFDWixVQUFVO1lBQ2IsTUFBTSxJQUFJekIsd0RBQWVBLENBQUMsQ0FBQyxXQUFXLEVBQUVrQixZQUFZTyxRQUFRLENBQUMsb0VBQW9FLENBQUM7UUFDcEk7UUFFQUUsZUFBZSxNQUFNRSxnQkFBZ0JTLGtCQUFrQixDQUFDYixTQUFTYyxFQUFFO1FBQ25FeEIsUUFBUUMsR0FBRyxDQUFDLDBEQUEwREUsWUFBWU8sUUFBUTtJQUM1RixFQUFFLE9BQU9kLE9BQU87UUFDZEksUUFBUUosS0FBSyxDQUFDLHFEQUFxREE7UUFDbkUsTUFBTSxJQUFJWCx3REFBZUEsQ0FBQztJQUM1QjtJQUVBLG1CQUFtQjtJQUNuQixJQUFJLENBQUMyQixnQkFBZ0IsT0FBT0EsaUJBQWlCLFlBQVlBLGFBQWFhLElBQUksR0FBR0MsTUFBTSxLQUFLLEdBQUc7UUFDekYxQixRQUFRSixLQUFLLENBQUM7UUFDZCxNQUFNLElBQUlYLHdEQUFlQSxDQUFDO0lBQzVCO0lBRUEsa0NBQWtDO0lBQ2xDLElBQUkyQixhQUFhYyxNQUFNLEdBQUcsSUFBSTtRQUM1QjFCLFFBQVFKLEtBQUssQ0FBQztRQUNkLE1BQU0sSUFBSVgsd0RBQWVBLENBQUM7SUFDNUI7SUFFQSxJQUFJO1FBQ0YsK0NBQStDO1FBQy9DLE1BQU0wQyxnQkFBZ0J0Qyw4RUFBd0JBLENBQUNjLFlBQVlPLFFBQVE7UUFDbkUsTUFBTWtCLGFBQWF4QyxzRUFBZ0JBLENBQUM7WUFDbENzQixVQUFVUCxZQUFZTyxRQUFRO1lBQzlCTixRQUFRUTtZQUNSUCxTQUFTQSxXQUFXc0IsY0FBY3RCLE9BQU87WUFDekNNLE9BQU9SLFlBQVlRLEtBQUs7WUFDeEJrQixZQUFZRixjQUFjRSxVQUFVO1lBQ3BDQyxZQUFZSCxjQUFjRyxVQUFVO1lBQ3BDQyxTQUFTSixjQUFjSSxPQUFPO1FBQ2hDO1FBRUEsc0JBQXNCO1FBQ3RCLE1BQU1DLGlCQUFpQjFDLDJFQUFpQkE7UUFFeEMsd0JBQXdCO1FBQ3hCLE1BQU0yQyxnQkFBZ0IxQyw0RUFBbUJBLENBQUNxQyxZQUFZSTtRQUV0RCx5QkFBeUI7UUFDekIsTUFBTUUsV0FBVyxNQUFNRCxjQUFjRSxZQUFZLENBQUM7WUFDaERDLFVBQVVqQyxZQUFZaUMsUUFBUTtZQUM5QnZDLFdBQVdNLFlBQVlOLFNBQVM7WUFDaENhLFVBQVVQLFlBQVlPLFFBQVE7WUFDOUJDLE9BQU9SLFlBQVlRLEtBQUs7WUFDeEJGLGdCQUFnQkEsa0JBQWtCLEVBQUU7WUFDcENIO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQSxNQUFNNkIsZUFBNkI7WUFDakNDLE9BQU9KLFNBQVNJLEtBQUs7WUFDckJDLFdBQVdMLFNBQVNLLFNBQVM7WUFDN0IxQyxXQUFXcUMsU0FBU3JDLFNBQVM7UUFDL0I7UUFFQUcsUUFBUUMsR0FBRyxDQUFDLENBQUMsaURBQWlELEVBQUVpQyxTQUFTckMsU0FBUyxFQUFFO1FBQ3BGLE9BQU9kLHFEQUFZQSxDQUFDWSxJQUFJLENBQUMwQztJQUMzQixFQUFFLE9BQU96QyxPQUFPO1FBQ2RJLFFBQVFKLEtBQUssQ0FBQywwQkFBMEJBO1FBRXhDLE1BQU00QyxlQUFlNUMsaUJBQWlCNkMsUUFBUTdDLE1BQU1FLE9BQU8sR0FBRztRQUM5RCxNQUFNNEMsYUFBYTlDLGlCQUFpQlgsd0RBQWVBLEdBQUcsTUFBTTtRQUU1RCxNQUFNb0QsZUFBNkI7WUFDakN4QyxXQUFXTSxZQUFZTixTQUFTO1lBQ2hDRCxPQUFPNEM7UUFDVDtRQUVBLE9BQU96RCxxREFBWUEsQ0FBQ1ksSUFBSSxDQUFDMEMsY0FBYztZQUFFdEMsUUFBUTJDO1FBQVc7SUFDOUQ7QUFDRjtBQUVPLE1BQU1DLE9BQU8zRCwyREFBWUEsQ0FBQ1EsYUFBYTtBQUN2QyxNQUFNb0QsVUFBVTVELDJEQUFZQSxDQUFDLFVBQVksSUFBSUQscURBQVlBLENBQUMsTUFBTTtRQUFFZ0IsUUFBUTtJQUFJLElBQUkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9vbmViaXJkL2dpdGh1Yi9lYm9vay1tY3AvbWNwLWNoYXQtdWkvYmFja2VuZC9zcmMvYXBwL2FwaS9jaGF0L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHdpdGhTZWN1cml0eSB9IGZyb20gJ0AvbGliL3NlY3VyaXR5JztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gJ0AvbGliL2Vycm9ycyc7XG5pbXBvcnQgeyB2YWxpZGF0ZUNoYXRSZXF1ZXN0IH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBlbnN1cmVJbml0aWFsaXplZCB9IGZyb20gJ0AvbGliL2luaXRpYWxpemF0aW9uJztcbmltcG9ydCB7IENoYXRSZXF1ZXN0LCBDaGF0UmVzcG9uc2UgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUxMTVNlcnZpY2UsIGdldERlZmF1bHRQcm92aWRlckNvbmZpZyB9IGZyb20gJ0Avc2VydmljZXMvTExNU2VydmljZSc7XG5pbXBvcnQgeyBnZXRTZXNzaW9uTWFuYWdlciB9IGZyb20gJ0Avc2VydmljZXMvU2Vzc2lvbk1hbmFnZXInO1xuaW1wb3J0IHsgY3JlYXRlQ2hhdFByb2Nlc3NvciB9IGZyb20gJ0Avc2VydmljZXMvQ2hhdFByb2Nlc3Nvcic7XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYXRIYW5kbGVyKHJlcXVlc3Q6IFJlcXVlc3QpOiBQcm9taXNlPE5leHRSZXNwb25zZT4ge1xuICBpZiAocmVxdWVzdC5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnLCBzZXNzaW9uSWQ6ICcnLCBtZXNzYWdlOiAnT25seSBQT1NUIG1ldGhvZCBpcyBhbGxvd2VkJyB9LFxuICAgICAgeyBzdGF0dXM6IDQwNSB9XG4gICAgKTtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGNoYXQgcmVxdWVzdCcpO1xuXG4gIC8vIEVuc3VyZSBiYWNrZW5kIGlzIGluaXRpYWxpemVkXG4gIGF3YWl0IGVuc3VyZUluaXRpYWxpemVkKCk7XG5cbiAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICBjb25zdCBjaGF0UmVxdWVzdCA9IHZhbGlkYXRlQ2hhdFJlcXVlc3QoYm9keSk7XG5cbiAgLy8gRXh0cmFjdCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZnJvbSByZXF1ZXN0IGJvZHlcbiAgY29uc3QgeyBcbiAgICBhcGlLZXksIFxuICAgIGJhc2VVcmwsIFxuICAgIHN5c3RlbVByb21wdCwgXG4gICAgdGVtcGVyYXR1cmUsIFxuICAgIG1heFRva2VucyxcbiAgICBhdmFpbGFibGVUb29scyBcbiAgfSA9IGJvZHk7XG5cbiAgLy8gTm90ZTogQVBJIGtleSBpcyBub3cgcmV0cmlldmVkIHNlY3VyZWx5IGZyb20gYmFja2VuZCBzdG9yYWdlLCBub3QgZnJvbSBmcm9udGVuZFxuICBjb25zb2xlLmxvZygn8J+UpyBCYWNrZW5kIHJlY2VpdmVkIHByb3ZpZGVyOicsIGNoYXRSZXF1ZXN0LnByb3ZpZGVyKTtcbiAgY29uc29sZS5sb2coJ/CfpJYgQmFja2VuZCByZWNlaXZlZCBtb2RlbDonLCBjaGF0UmVxdWVzdC5tb2RlbCk7XG5cbiAgLy8gR2V0IEFQSSBrZXkgZnJvbSBzZWN1cmUgc2V0dGluZ3MgbWFuYWdlciAobmV2ZXIgZnJvbSBmcm9udGVuZClcbiAgbGV0IGFjdHVhbEFwaUtleTogc3RyaW5nO1xuICB0cnkge1xuICAgIGNvbnN0IHsgZ2V0U2VjdXJlU2V0dGluZ3NNYW5hZ2VyIH0gPSBhd2FpdCBpbXBvcnQoJ0Avc2VydmljZXMvU2VjdXJlU2V0dGluZ3NNYW5hZ2VyJyk7XG4gICAgY29uc3Qgc2V0dGluZ3NNYW5hZ2VyID0gZ2V0U2VjdXJlU2V0dGluZ3NNYW5hZ2VyKCk7XG4gICAgYXdhaXQgc2V0dGluZ3NNYW5hZ2VyLmluaXRpYWxpemUoKTtcbiAgICBcbiAgICAvLyBGaW5kIHRoZSBwcm92aWRlciBjb25maWd1cmF0aW9uIGJ5IG1hdGNoaW5nIHByb3ZpZGVyIG5hbWVcbiAgICBjb25zdCBzZXR0aW5ncyA9IGF3YWl0IHNldHRpbmdzTWFuYWdlci5nZXRTZXR0aW5ncygpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gc2V0dGluZ3MubGxtUHJvdmlkZXJzLmZpbmQocCA9PiBwLm5hbWUgPT09IGNoYXRSZXF1ZXN0LnByb3ZpZGVyICYmIHAuZW5hYmxlZCk7XG4gICAgXG4gICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgTm8gZW5hYmxlZCAke2NoYXRSZXF1ZXN0LnByb3ZpZGVyfSBwcm92aWRlciBmb3VuZC4gUGxlYXNlIGNvbmZpZ3VyZSBhbmQgZW5hYmxlIGEgcHJvdmlkZXIgaW4gc2V0dGluZ3MuYCk7XG4gICAgfVxuICAgIFxuICAgIGFjdHVhbEFwaUtleSA9IGF3YWl0IHNldHRpbmdzTWFuYWdlci5nZXREZWNyeXB0ZWRBcGlLZXkocHJvdmlkZXIuaWQpO1xuICAgIGNvbnNvbGUubG9nKCfwn5SRIFJldHJpZXZlZCBBUEkga2V5IGZyb20gc2VjdXJlIHN0b3JhZ2UgZm9yIHByb3ZpZGVyOicsIGNoYXRSZXF1ZXN0LnByb3ZpZGVyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHJldHJpZXZlIEFQSSBrZXkgZnJvbSBzZWN1cmUgc3RvcmFnZTonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQVBJIGtleSBub3QgZm91bmQgaW4gc2VjdXJlIHN0b3JhZ2UuIFBsZWFzZSBjb25maWd1cmUgeW91ciBBUEkga2V5IGluIHNldHRpbmdzLicpO1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgQVBJIGtleVxuICBpZiAoIWFjdHVhbEFwaUtleSB8fCB0eXBlb2YgYWN0dWFsQXBpS2V5ICE9PSAnc3RyaW5nJyB8fCBhY3R1YWxBcGlLZXkudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBBUEkga2V5IHZhbGlkYXRpb24gZmFpbGVkOiBtaXNzaW5nIG9yIGVtcHR5Jyk7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignQVBJIGtleSBpcyByZXF1aXJlZCBmb3IgY2hhdCByZXF1ZXN0cycpO1xuICB9XG5cbiAgLy8gQmFzaWMgQVBJIGtleSBmb3JtYXQgdmFsaWRhdGlvblxuICBpZiAoYWN0dWFsQXBpS2V5Lmxlbmd0aCA8IDEwKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEFQSSBrZXkgdmFsaWRhdGlvbiBmYWlsZWQ6IHRvbyBzaG9ydCcpO1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0FQSSBrZXkgYXBwZWFycyB0byBiZSBpbnZhbGlkICh0b28gc2hvcnQpJyk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIENyZWF0ZSBMTE0gc2VydmljZSB3aXRoIHVzZXIncyBjb25maWd1cmF0aW9uXG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IGdldERlZmF1bHRQcm92aWRlckNvbmZpZyhjaGF0UmVxdWVzdC5wcm92aWRlcik7XG4gICAgY29uc3QgbGxtU2VydmljZSA9IGNyZWF0ZUxMTVNlcnZpY2Uoe1xuICAgICAgcHJvdmlkZXI6IGNoYXRSZXF1ZXN0LnByb3ZpZGVyLFxuICAgICAgYXBpS2V5OiBhY3R1YWxBcGlLZXksXG4gICAgICBiYXNlVXJsOiBiYXNlVXJsIHx8IGRlZmF1bHRDb25maWcuYmFzZVVybCxcbiAgICAgIG1vZGVsOiBjaGF0UmVxdWVzdC5tb2RlbCxcbiAgICAgIG1heFJldHJpZXM6IGRlZmF1bHRDb25maWcubWF4UmV0cmllcyxcbiAgICAgIHJldHJ5RGVsYXk6IGRlZmF1bHRDb25maWcucmV0cnlEZWxheSxcbiAgICAgIHRpbWVvdXQ6IGRlZmF1bHRDb25maWcudGltZW91dCxcbiAgICB9KTtcblxuICAgIC8vIEdldCBzZXNzaW9uIG1hbmFnZXJcbiAgICBjb25zdCBzZXNzaW9uTWFuYWdlciA9IGdldFNlc3Npb25NYW5hZ2VyKCk7XG5cbiAgICAvLyBDcmVhdGUgY2hhdCBwcm9jZXNzb3JcbiAgICBjb25zdCBjaGF0UHJvY2Vzc29yID0gY3JlYXRlQ2hhdFByb2Nlc3NvcihsbG1TZXJ2aWNlLCBzZXNzaW9uTWFuYWdlcik7XG5cbiAgICAvLyBQcm9jZXNzIHRoZSBjaGF0IHF1ZXJ5XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjaGF0UHJvY2Vzc29yLnByb2Nlc3NRdWVyeSh7XG4gICAgICBtZXNzYWdlczogY2hhdFJlcXVlc3QubWVzc2FnZXMsXG4gICAgICBzZXNzaW9uSWQ6IGNoYXRSZXF1ZXN0LnNlc3Npb25JZCxcbiAgICAgIHByb3ZpZGVyOiBjaGF0UmVxdWVzdC5wcm92aWRlcixcbiAgICAgIG1vZGVsOiBjaGF0UmVxdWVzdC5tb2RlbCxcbiAgICAgIGF2YWlsYWJsZVRvb2xzOiBhdmFpbGFibGVUb29scyB8fCBbXSxcbiAgICAgIHN5c3RlbVByb21wdCxcbiAgICAgIHRlbXBlcmF0dXJlLFxuICAgICAgbWF4VG9rZW5zLFxuICAgIH0pO1xuXG4gICAgY29uc3QgY2hhdFJlc3BvbnNlOiBDaGF0UmVzcG9uc2UgPSB7XG4gICAgICByZXBseTogcmVzcG9uc2UucmVwbHksXG4gICAgICB0b29sQ2FsbHM6IHJlc3BvbnNlLnRvb2xDYWxscyxcbiAgICAgIHNlc3Npb25JZDogcmVzcG9uc2Uuc2Vzc2lvbklkLFxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZyhgQ2hhdCByZXF1ZXN0IHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkgZm9yIHNlc3Npb246ICR7cmVzcG9uc2Uuc2Vzc2lvbklkfWApO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihjaGF0UmVzcG9uc2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0NoYXQgcHJvY2Vzc2luZyBlcnJvcjonLCBlcnJvcik7XG4gICAgXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCc7XG4gICAgY29uc3Qgc3RhdHVzQ29kZSA9IGVycm9yIGluc3RhbmNlb2YgVmFsaWRhdGlvbkVycm9yID8gNDAwIDogNTAwO1xuICAgIFxuICAgIGNvbnN0IGNoYXRSZXNwb25zZTogQ2hhdFJlc3BvbnNlID0ge1xuICAgICAgc2Vzc2lvbklkOiBjaGF0UmVxdWVzdC5zZXNzaW9uSWQsXG4gICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgIH07XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oY2hhdFJlc3BvbnNlLCB7IHN0YXR1czogc3RhdHVzQ29kZSB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgUE9TVCA9IHdpdGhTZWN1cml0eShjaGF0SGFuZGxlcik7XG5leHBvcnQgY29uc3QgT1BUSU9OUyA9IHdpdGhTZWN1cml0eShhc3luYyAoKSA9PiBuZXcgTmV4dFJlc3BvbnNlKG51bGwsIHsgc3RhdHVzOiAyMDAgfSkpOyJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJ3aXRoU2VjdXJpdHkiLCJWYWxpZGF0aW9uRXJyb3IiLCJ2YWxpZGF0ZUNoYXRSZXF1ZXN0IiwiZW5zdXJlSW5pdGlhbGl6ZWQiLCJjcmVhdGVMTE1TZXJ2aWNlIiwiZ2V0RGVmYXVsdFByb3ZpZGVyQ29uZmlnIiwiZ2V0U2Vzc2lvbk1hbmFnZXIiLCJjcmVhdGVDaGF0UHJvY2Vzc29yIiwiY2hhdEhhbmRsZXIiLCJyZXF1ZXN0IiwibWV0aG9kIiwianNvbiIsImVycm9yIiwic2Vzc2lvbklkIiwibWVzc2FnZSIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwiY2hhdFJlcXVlc3QiLCJhcGlLZXkiLCJiYXNlVXJsIiwic3lzdGVtUHJvbXB0IiwidGVtcGVyYXR1cmUiLCJtYXhUb2tlbnMiLCJhdmFpbGFibGVUb29scyIsInByb3ZpZGVyIiwibW9kZWwiLCJhY3R1YWxBcGlLZXkiLCJnZXRTZWN1cmVTZXR0aW5nc01hbmFnZXIiLCJzZXR0aW5nc01hbmFnZXIiLCJpbml0aWFsaXplIiwic2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsImxsbVByb3ZpZGVycyIsImZpbmQiLCJwIiwibmFtZSIsImVuYWJsZWQiLCJnZXREZWNyeXB0ZWRBcGlLZXkiLCJpZCIsInRyaW0iLCJsZW5ndGgiLCJkZWZhdWx0Q29uZmlnIiwibGxtU2VydmljZSIsIm1heFJldHJpZXMiLCJyZXRyeURlbGF5IiwidGltZW91dCIsInNlc3Npb25NYW5hZ2VyIiwiY2hhdFByb2Nlc3NvciIsInJlc3BvbnNlIiwicHJvY2Vzc1F1ZXJ5IiwibWVzc2FnZXMiLCJjaGF0UmVzcG9uc2UiLCJyZXBseSIsInRvb2xDYWxscyIsImVycm9yTWVzc2FnZSIsIkVycm9yIiwic3RhdHVzQ29kZSIsIlBPU1QiLCJPUFRJT05TIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cors.ts":
/*!*************************!*\
  !*** ./src/lib/cors.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   corsHeaders: () => (/* binding */ corsHeaders),\n/* harmony export */   getSecurityHeaders: () => (/* binding */ getSecurityHeaders),\n/* harmony export */   handleCors: () => (/* binding */ handleCors),\n/* harmony export */   withCors: () => (/* binding */ withCors)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Development: Allow localhost with any port\n// Production: Use specific allowed origins\nconst isDevelopment = \"development\" !== 'production';\nconst LOCALHOST_PATTERN = /^http:\\/\\/localhost:\\d+$/;\nconst ALLOWED_PORTS = [\n    3000,\n    4173,\n    5173,\n    5174,\n    5175,\n    5176,\n    5177,\n    5178,\n    5179,\n    8080\n]; // Common dev ports\nconst PRODUCTION_ORIGINS = [\n    'https://your-domain.com'\n];\nfunction corsHeaders(origin) {\n    let allowedOrigin;\n    if (isDevelopment) {\n        if (origin && LOCALHOST_PATTERN.test(origin)) {\n            // In development, allow any localhost port\n            allowedOrigin = origin;\n        } else {\n            // Default to common dev server port\n            allowedOrigin = 'http://localhost:5173';\n        }\n    } else {\n        // In production, use strict origin checking\n        if (origin && PRODUCTION_ORIGINS.includes(origin)) {\n            allowedOrigin = origin;\n        } else {\n            allowedOrigin = PRODUCTION_ORIGINS[0] || 'http://localhost:5173';\n        }\n    }\n    const headers = {\n        // CORS headers\n        'Access-Control-Allow-Origin': allowedOrigin,\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n        'Access-Control-Allow-Credentials': 'true',\n        'Access-Control-Max-Age': '86400'\n    };\n    // Add security headers if enabled\n    if (process.env.SECURITY_HEADERS_ENABLED !== 'false') {\n        Object.assign(headers, getSecurityHeaders());\n    }\n    return headers;\n}\nfunction getSecurityHeaders() {\n    return {\n        // Prevent XSS attacks\n        'X-XSS-Protection': '1; mode=block',\n        // Prevent MIME type sniffing\n        'X-Content-Type-Options': 'nosniff',\n        // Prevent clickjacking\n        'X-Frame-Options': 'DENY',\n        // Referrer policy\n        'Referrer-Policy': 'strict-origin-when-cross-origin',\n        // Content Security Policy (restrictive for API)\n        'Content-Security-Policy': \"default-src 'none'; frame-ancestors 'none';\",\n        // Permissions policy\n        'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), payment=()',\n        // HSTS (only in production with HTTPS)\n        ... false && 0\n    };\n}\nfunction handleCors(request) {\n    const origin = request.headers.get('origin');\n    return corsHeaders(origin || undefined);\n}\nfunction withCors(handler) {\n    return async (request, context)=>{\n        // Convert Request to NextRequest for CORS handling\n        const nextRequest = request;\n        const corsHeadersObj = handleCors(nextRequest);\n        if (request.method === 'OPTIONS') {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n                status: 200,\n                headers: corsHeadersObj\n            });\n        }\n        try {\n            const response = await handler(request, context);\n            // Add CORS headers to the response\n            Object.entries(corsHeadersObj).forEach(([key, value])=>{\n                response.headers.set(key, value);\n            });\n            return response;\n        } catch (error) {\n            console.error('CORS Handler Error:', error);\n            // Return proper JSON error response\n            const statusCode = error instanceof Error && 'statusCode' in error ? error.statusCode : 500;\n            const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';\n            const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: error instanceof Error ? error.name : 'Error',\n                message: errorMessage,\n                statusCode\n            }, {\n                status: statusCode\n            });\n            // Add CORS headers to error response\n            Object.entries(corsHeadersObj).forEach(([key, value])=>{\n                response.headers.set(key, value);\n            });\n            return response;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/encryption.ts":
/*!*******************************!*\
  !*** ./src/lib/encryption.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptionService: () => (/* binding */ EncryptionService),\n/* harmony export */   getEncryptionService: () => (/* binding */ getEncryptionService)\n/* harmony export */ });\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/crypto-js/index.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\n/**\n * Encryption utility for securing sensitive data like API keys\n */ class EncryptionService {\n    constructor(){\n        // Get encryption key from environment or generate a default one\n        this.secretKey = process.env.ENCRYPTION_KEY || this.generateDefaultKey();\n        if (!process.env.ENCRYPTION_KEY) {\n            console.warn('ENCRYPTION_KEY not set in environment. Using generated key. This is not secure for production!');\n        }\n    }\n    /**\n   * Encrypt sensitive data\n   */ encrypt(data) {\n        try {\n            if (!data) return '';\n            const encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().AES.encrypt(data, this.secretKey).toString();\n            return encrypted;\n        } catch (error) {\n            console.error('Encryption failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to encrypt data');\n        }\n    }\n    /**\n   * Decrypt sensitive data\n   */ decrypt(encryptedData) {\n        try {\n            if (!encryptedData) return '';\n            const bytes = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().AES.decrypt(encryptedData, this.secretKey);\n            const decrypted = bytes.toString((crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc).Utf8);\n            if (!decrypted) {\n                throw new Error('Failed to decrypt data - invalid key or corrupted data');\n            }\n            return decrypted;\n        } catch (error) {\n            console.error('Decryption failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to decrypt data');\n        }\n    }\n    /**\n   * Hash data for secure comparison (one-way)\n   */ hash(data) {\n        try {\n            return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().SHA256(data).toString();\n        } catch (error) {\n            console.error('Hashing failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to hash data');\n        }\n    }\n    /**\n   * Generate a secure random key\n   */ generateSecureKey() {\n        return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().lib.WordArray.random(256 / 8).toString();\n    }\n    /**\n   * Mask sensitive data for display (show only last 4 characters with limited mask length)\n   */ maskApiKey(apiKey) {\n        if (!apiKey || apiKey.length < 8) {\n            return '••••';\n        }\n        const visibleChars = 4;\n        const maxMaskLength = 8; // Limit mask length to prevent UI overflow\n        const actualMaskLength = Math.min(maxMaskLength, Math.max(0, apiKey.length - visibleChars));\n        const maskedPart = '•'.repeat(actualMaskLength);\n        const visiblePart = apiKey.slice(-visibleChars);\n        return maskedPart + visiblePart;\n    }\n    /**\n   * Validate if a string appears to be encrypted\n   */ isEncrypted(data) {\n        try {\n            // Try to decrypt - if it fails, it's likely not encrypted\n            this.decrypt(data);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    generateDefaultKey() {\n        // Generate a consistent but unique key based on system info\n        // This is NOT secure for production - should use proper environment variable\n        const systemInfo = process.platform + process.arch + (process.env.HOME || process.env.USERPROFILE || 'default');\n        return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().SHA256(systemInfo + 'mcp-chat-ui-default-key').toString();\n    }\n}\n// Singleton instance\nlet encryptionService = null;\nfunction getEncryptionService() {\n    if (!encryptionService) {\n        encryptionService = new EncryptionService();\n    }\n    return encryptionService;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/encryption.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   ToolExecutionError: () => (/* binding */ ToolExecutionError),\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),\n/* harmony export */   handleAsyncRoute: () => (/* binding */ handleAsyncRoute)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nclass AppError extends Error {\n    constructor(message, statusCode = 500, isOperational = true){\n        super(message);\n        this.statusCode = statusCode;\n        this.isOperational = isOperational;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nclass ValidationError extends AppError {\n    constructor(message){\n        super(message, 400);\n    }\n}\nclass NotFoundError extends AppError {\n    constructor(message = 'Resource not found'){\n        super(message, 404);\n    }\n}\nclass UnauthorizedError extends AppError {\n    constructor(message = 'Unauthorized'){\n        super(message, 401);\n    }\n}\nclass InternalServerError extends AppError {\n    constructor(message = 'Internal server error'){\n        super(message, 500);\n    }\n}\nclass ToolExecutionError extends AppError {\n    constructor(message, statusCode = 500){\n        super(message, statusCode);\n    }\n}\nfunction createErrorResponse(error) {\n    console.error('API Error:', error);\n    if (error instanceof AppError) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.constructor.name,\n            message: error.message,\n            statusCode: error.statusCode\n        }, {\n            status: error.statusCode\n        });\n    }\n    if (error instanceof Error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'InternalServerError',\n            message: error.message,\n            statusCode: 500\n        }, {\n            status: 500\n        });\n    }\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        error: 'UnknownError',\n        message: 'An unknown error occurred',\n        statusCode: 500\n    }, {\n        status: 500\n    });\n}\nfunction handleAsyncRoute(handler) {\n    return async (request, context)=>{\n        try {\n            return await handler(request, context);\n        } catch (error) {\n            return createErrorResponse(error);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2Vycm9ycy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBd0Q7QUFHakQsTUFBTUMsaUJBQWlCQztJQUk1QixZQUFZQyxPQUFlLEVBQUVDLGFBQXFCLEdBQUcsRUFBRUMsZ0JBQXlCLElBQUksQ0FBRTtRQUNwRixLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUVyQkgsTUFBTUksaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXO0lBQ2hEO0FBQ0Y7QUFFTyxNQUFNQyx3QkFBd0JOO0lBQ25DLFlBQVlFLE9BQWUsQ0FBRTtRQUMzQixLQUFLLENBQUNBLFNBQVM7SUFDakI7QUFDRjtBQUVPLE1BQU1LLHNCQUFzQlA7SUFDakMsWUFBWUUsVUFBa0Isb0JBQW9CLENBQUU7UUFDbEQsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCO0FBQ0Y7QUFFTyxNQUFNTSwwQkFBMEJSO0lBQ3JDLFlBQVlFLFVBQWtCLGNBQWMsQ0FBRTtRQUM1QyxLQUFLLENBQUNBLFNBQVM7SUFDakI7QUFDRjtBQUVPLE1BQU1PLDRCQUE0QlQ7SUFDdkMsWUFBWUUsVUFBa0IsdUJBQXVCLENBQUU7UUFDckQsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCO0FBQ0Y7QUFFTyxNQUFNUSwyQkFBMkJWO0lBQ3RDLFlBQVlFLE9BQWUsRUFBRUMsYUFBcUIsR0FBRyxDQUFFO1FBQ3JELEtBQUssQ0FBQ0QsU0FBU0M7SUFDakI7QUFDRjtBQUVPLFNBQVNRLG9CQUFvQkMsS0FBYztJQUNoREMsUUFBUUQsS0FBSyxDQUFDLGNBQWNBO0lBRTVCLElBQUlBLGlCQUFpQlosVUFBVTtRQUM3QixPQUFPRCxxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtZQUNFRixPQUFPQSxNQUFNLFdBQVcsQ0FBQ0csSUFBSTtZQUM3QmIsU0FBU1UsTUFBTVYsT0FBTztZQUN0QkMsWUFBWVMsTUFBTVQsVUFBVTtRQUM5QixHQUNBO1lBQUVhLFFBQVFKLE1BQU1ULFVBQVU7UUFBQztJQUUvQjtJQUVBLElBQUlTLGlCQUFpQlgsT0FBTztRQUMxQixPQUFPRixxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtZQUNFRixPQUFPO1lBQ1BWLFNBQVNVLE1BQU1WLE9BQU87WUFDdEJDLFlBQVk7UUFDZCxHQUNBO1lBQUVhLFFBQVE7UUFBSTtJQUVsQjtJQUVBLE9BQU9qQixxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtRQUNFRixPQUFPO1FBQ1BWLFNBQVM7UUFDVEMsWUFBWTtJQUNkLEdBQ0E7UUFBRWEsUUFBUTtJQUFJO0FBRWxCO0FBRU8sU0FBU0MsaUJBQ2RDLE9BQW1FO0lBRW5FLE9BQU8sT0FBT0MsU0FBa0JDO1FBQzlCLElBQUk7WUFDRixPQUFPLE1BQU1GLFFBQVFDLFNBQVNDO1FBQ2hDLEVBQUUsT0FBT1IsT0FBTztZQUNkLE9BQU9ELG9CQUFvQkM7UUFDN0I7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvb25lYmlyZC9naXRodWIvZWJvb2stbWNwL21jcC1jaGF0LXVpL2JhY2tlbmQvc3JjL2xpYi9lcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IEFwaUVycm9yIH0gZnJvbSAnQC90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBBcHBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHVibGljIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgcHVibGljIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDAsIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmlzT3BlcmF0aW9uYWwgPSBpc09wZXJhdGlvbmFsO1xuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDAwKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90Rm91bmRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ1Jlc291cmNlIG5vdCBmb3VuZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmF1dGhvcml6ZWRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ1VuYXV0aG9yaXplZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDEpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFNlcnZlckVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcgPSAnSW50ZXJuYWwgc2VydmVyIGVycm9yJykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIDUwMCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2xFeGVjdXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDApIHtcbiAgICBzdXBlcihtZXNzYWdlLCBzdGF0dXNDb2RlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZShlcnJvcjogdW5rbm93bik6IE5leHRSZXNwb25zZTxBcGlFcnJvcj4ge1xuICBjb25zb2xlLmVycm9yKCdBUEkgRXJyb3I6JywgZXJyb3IpO1xuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEFwcEVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZXJyb3IuY29uc3RydWN0b3IubmFtZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzQ29kZSxcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogZXJyb3Iuc3RhdHVzQ29kZSB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsU2VydmVyRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICB7XG4gICAgICBlcnJvcjogJ1Vua25vd25FcnJvcicsXG4gICAgICBtZXNzYWdlOiAnQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCcsXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgfSxcbiAgICB7IHN0YXR1czogNTAwIH1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUFzeW5jUm91dGUoXG4gIGhhbmRsZXI6IChyZXF1ZXN0OiBSZXF1ZXN0LCBjb250ZXh0PzogYW55KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT5cbikge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3Q6IFJlcXVlc3QsIGNvbnRleHQ/OiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZXIocmVxdWVzdCwgY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGVycm9yKTtcbiAgICB9XG4gIH07XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkFwcEVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzQ29kZSIsImlzT3BlcmF0aW9uYWwiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIlZhbGlkYXRpb25FcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJVbmF1dGhvcml6ZWRFcnJvciIsIkludGVybmFsU2VydmVyRXJyb3IiLCJUb29sRXhlY3V0aW9uRXJyb3IiLCJjcmVhdGVFcnJvclJlc3BvbnNlIiwiZXJyb3IiLCJjb25zb2xlIiwianNvbiIsIm5hbWUiLCJzdGF0dXMiLCJoYW5kbGVBc3luY1JvdXRlIiwiaGFuZGxlciIsInJlcXVlc3QiLCJjb250ZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/initialization.ts":
/*!***********************************!*\
  !*** ./src/lib/initialization.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureInitialized: () => (/* binding */ ensureInitialized),\n/* harmony export */   initializeBackend: () => (/* binding */ initializeBackend),\n/* harmony export */   isBackendInitialized: () => (/* binding */ isBackendInitialized)\n/* harmony export */ });\n/* harmony import */ var _services_SessionManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/services/SessionManager */ \"(rsc)/./src/services/SessionManager.ts\");\n\nlet isInitialized = false;\n/**\n * Initialize all backend services\n */ async function initializeBackend() {\n    if (isInitialized) {\n        return;\n    }\n    try {\n        console.log('Initializing backend services...');\n        // Initialize session manager\n        await (0,_services_SessionManager__WEBPACK_IMPORTED_MODULE_0__.initializeSessionManager)();\n        console.log('Session manager initialized');\n        isInitialized = true;\n        console.log('Backend initialization complete');\n    } catch (error) {\n        console.error('Failed to initialize backend:', error);\n        throw error;\n    }\n}\n/**\n * Ensure backend is initialized before handling requests\n */ async function ensureInitialized() {\n    if (!isInitialized) {\n        await initializeBackend();\n    }\n}\n/**\n * Check if backend is initialized\n */ function isBackendInitialized() {\n    return isInitialized;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2luaXRpYWxpemF0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUU7QUFFckUsSUFBSUMsZ0JBQWdCO0FBRXBCOztDQUVDLEdBQ00sZUFBZUM7SUFDcEIsSUFBSUQsZUFBZTtRQUNqQjtJQUNGO0lBRUEsSUFBSTtRQUNGRSxRQUFRQyxHQUFHLENBQUM7UUFFWiw2QkFBNkI7UUFDN0IsTUFBTUosa0ZBQXdCQTtRQUM5QkcsUUFBUUMsR0FBRyxDQUFDO1FBRVpILGdCQUFnQjtRQUNoQkUsUUFBUUMsR0FBRyxDQUFDO0lBQ2QsRUFBRSxPQUFPQyxPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE1BQU1BO0lBQ1I7QUFDRjtBQUVBOztDQUVDLEdBQ00sZUFBZUM7SUFDcEIsSUFBSSxDQUFDTCxlQUFlO1FBQ2xCLE1BQU1DO0lBQ1I7QUFDRjtBQUVBOztDQUVDLEdBQ00sU0FBU0s7SUFDZCxPQUFPTjtBQUNUIiwic291cmNlcyI6WyIvVXNlcnMvb25lYmlyZC9naXRodWIvZWJvb2stbWNwL21jcC1jaGF0LXVpL2JhY2tlbmQvc3JjL2xpYi9pbml0aWFsaXphdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0aWFsaXplU2Vzc2lvbk1hbmFnZXIgfSBmcm9tICdAL3NlcnZpY2VzL1Nlc3Npb25NYW5hZ2VyJztcblxubGV0IGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGFsbCBiYWNrZW5kIHNlcnZpY2VzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplQmFja2VuZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGlzSW5pdGlhbGl6ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgYmFja2VuZCBzZXJ2aWNlcy4uLicpO1xuICAgIFxuICAgIC8vIEluaXRpYWxpemUgc2Vzc2lvbiBtYW5hZ2VyXG4gICAgYXdhaXQgaW5pdGlhbGl6ZVNlc3Npb25NYW5hZ2VyKCk7XG4gICAgY29uc29sZS5sb2coJ1Nlc3Npb24gbWFuYWdlciBpbml0aWFsaXplZCcpO1xuXG4gICAgaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc29sZS5sb2coJ0JhY2tlbmQgaW5pdGlhbGl6YXRpb24gY29tcGxldGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBiYWNrZW5kOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBiYWNrZW5kIGlzIGluaXRpYWxpemVkIGJlZm9yZSBoYW5kbGluZyByZXF1ZXN0c1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5zdXJlSW5pdGlhbGl6ZWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGlmICghaXNJbml0aWFsaXplZCkge1xuICAgIGF3YWl0IGluaXRpYWxpemVCYWNrZW5kKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBiYWNrZW5kIGlzIGluaXRpYWxpemVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0JhY2tlbmRJbml0aWFsaXplZCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSW5pdGlhbGl6ZWQ7XG59Il0sIm5hbWVzIjpbImluaXRpYWxpemVTZXNzaW9uTWFuYWdlciIsImlzSW5pdGlhbGl6ZWQiLCJpbml0aWFsaXplQmFja2VuZCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImVuc3VyZUluaXRpYWxpemVkIiwiaXNCYWNrZW5kSW5pdGlhbGl6ZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/initialization.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/rateLimit.ts":
/*!******************************!*\
  !*** ./src/lib/rateLimit.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateAndSanitizeInput: () => (/* binding */ validateAndSanitizeInput),\n/* harmony export */   validateJsonInput: () => (/* binding */ validateJsonInput),\n/* harmony export */   withRateLimit: () => (/* binding */ withRateLimit)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\nclass RateLimiter {\n    constructor(windowMs = 15 * 60 * 1000, maxRequests = 100){\n        this.requests = new Map();\n        this.windowMs = windowMs;\n        this.maxRequests = maxRequests;\n        // Clean up expired entries every 5 minutes\n        this.cleanupInterval = setInterval(()=>{\n            this.cleanup();\n        }, 5 * 60 * 1000);\n    }\n    /**\n   * Check if request is within rate limit\n   */ checkLimit(identifier) {\n        const now = Date.now();\n        const entry = this.requests.get(identifier);\n        if (!entry || now > entry.resetTime) {\n            // First request or window expired\n            const resetTime = now + this.windowMs;\n            this.requests.set(identifier, {\n                count: 1,\n                resetTime\n            });\n            return {\n                allowed: true,\n                remaining: this.maxRequests - 1,\n                resetTime\n            };\n        }\n        if (entry.count >= this.maxRequests) {\n            // Rate limit exceeded\n            return {\n                allowed: false,\n                remaining: 0,\n                resetTime: entry.resetTime\n            };\n        }\n        // Increment count\n        entry.count++;\n        this.requests.set(identifier, entry);\n        return {\n            allowed: true,\n            remaining: this.maxRequests - entry.count,\n            resetTime: entry.resetTime\n        };\n    }\n    /**\n   * Clean up expired entries\n   */ cleanup() {\n        const now = Date.now();\n        for (const [key, entry] of this.requests.entries()){\n            if (now > entry.resetTime) {\n                this.requests.delete(key);\n            }\n        }\n    }\n    /**\n   * Shutdown the rate limiter\n   */ shutdown() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = undefined;\n        }\n    }\n}\n// Global rate limiter instance\nlet rateLimiter = null;\nfunction getRateLimiter() {\n    if (!rateLimiter) {\n        const windowMs = parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'); // 15 minutes\n        const maxRequests = parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100');\n        rateLimiter = new RateLimiter(windowMs, maxRequests);\n    }\n    return rateLimiter;\n}\n/**\n * Get client identifier for rate limiting\n */ function getClientIdentifier(request) {\n    // Try to get real IP from various headers (for reverse proxy setups)\n    const forwarded = request.headers.get('x-forwarded-for');\n    const realIp = request.headers.get('x-real-ip');\n    const cfConnectingIp = request.headers.get('cf-connecting-ip');\n    const ip = forwarded?.split(',')[0] || realIp || cfConnectingIp || request.ip || 'unknown';\n    // In development, use a more permissive identifier\n    if (true) {\n        return `dev-${ip}`;\n    }\n    return ip;\n}\n/**\n * Rate limiting middleware\n */ function withRateLimit(handler, options = {}) {\n    return async (request, context)=>{\n        // Skip rate limiting if disabled\n        if (process.env.RATE_LIMIT_ENABLED === 'false') {\n            return handler(request, context);\n        }\n        const nextRequest = request;\n        const identifier = getClientIdentifier(nextRequest);\n        const limiter = getRateLimiter();\n        const { allowed, remaining, resetTime } = limiter.checkLimit(identifier);\n        if (!allowed) {\n            const resetDate = new Date(resetTime);\n            const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Rate limit exceeded',\n                message: `Too many requests. Try again after ${resetDate.toISOString()}`,\n                statusCode: 429\n            }, {\n                status: 429\n            });\n            // Add rate limit headers\n            response.headers.set('X-RateLimit-Limit', limiter['maxRequests'].toString());\n            response.headers.set('X-RateLimit-Remaining', remaining.toString());\n            response.headers.set('X-RateLimit-Reset', Math.ceil(resetTime / 1000).toString());\n            response.headers.set('Retry-After', Math.ceil((resetTime - Date.now()) / 1000).toString());\n            return response;\n        }\n        try {\n            const response = await handler(request, context);\n            // Add rate limit headers to successful responses\n            response.headers.set('X-RateLimit-Limit', limiter['maxRequests'].toString());\n            response.headers.set('X-RateLimit-Remaining', remaining.toString());\n            response.headers.set('X-RateLimit-Reset', Math.ceil(resetTime / 1000).toString());\n            return response;\n        } catch (error) {\n            console.error('Rate Limited Handler Error:', error);\n            // Ensure we return a proper JSON error response\n            if (error instanceof Error && 'statusCode' in error) {\n                const statusCode = error.statusCode || 500;\n                const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: error.name || 'Error',\n                    message: error.message,\n                    statusCode\n                }, {\n                    status: statusCode\n                });\n                // Add rate limit headers to error responses too\n                response.headers.set('X-RateLimit-Limit', limiter['maxRequests'].toString());\n                response.headers.set('X-RateLimit-Remaining', remaining.toString());\n                response.headers.set('X-RateLimit-Reset', Math.ceil(resetTime / 1000).toString());\n                return response;\n            }\n            throw error;\n        }\n    };\n}\n/**\n * Enhanced input validation with rate limiting considerations\n */ function validateAndSanitizeInput(input, maxLength = 10000) {\n    if (typeof input !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError('Input must be a string');\n    }\n    if (input.length > maxLength) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(`Input too long. Maximum length is ${maxLength} characters`);\n    }\n    // Basic XSS prevention\n    const sanitized = input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/javascript:/gi, '').replace(/on\\w+\\s*=/gi, '').replace(/data:text\\/html/gi, '').trim();\n    return sanitized;\n}\n/**\n * Validate JSON input with size limits\n */ function validateJsonInput(input, maxSize = 1024 * 1024) {\n    if (input.length > maxSize) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(`JSON input too large. Maximum size is ${maxSize} bytes`);\n    }\n    try {\n        return JSON.parse(input);\n    } catch (error) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError('Invalid JSON format');\n    }\n}\n// Cleanup on process exit\nprocess.on('SIGTERM', ()=>{\n    if (rateLimiter) {\n        rateLimiter.shutdown();\n    }\n});\nprocess.on('SIGINT', ()=>{\n    if (rateLimiter) {\n        rateLimiter.shutdown();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/rateLimit.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/security.ts":
/*!*****************************!*\
  !*** ./src/lib/security.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addSecurityHeaders: () => (/* binding */ addSecurityHeaders),\n/* harmony export */   generateSecureToken: () => (/* binding */ generateSecureToken),\n/* harmony export */   logSecurityEvent: () => (/* binding */ logSecurityEvent),\n/* harmony export */   sanitizeRequestBody: () => (/* binding */ sanitizeRequestBody),\n/* harmony export */   validateFileUpload: () => (/* binding */ validateFileUpload),\n/* harmony export */   withSecurity: () => (/* binding */ withSecurity)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _cors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cors */ \"(rsc)/./src/lib/cors.ts\");\n/* harmony import */ var _rateLimit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rateLimit */ \"(rsc)/./src/lib/rateLimit.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\n\n\n/**\n * Comprehensive security middleware that combines all security features\n */ function withSecurity(handler, options = {}) {\n    const { rateLimit = true, cors = true, validation = true, maxBodySize = 1024 * 1024 } = options;\n    let secureHandler = handler;\n    // Apply validation middleware\n    if (validation) {\n        secureHandler = withValidation(secureHandler, {\n            maxBodySize\n        });\n    }\n    // Apply rate limiting\n    if (rateLimit) {\n        secureHandler = (0,_rateLimit__WEBPACK_IMPORTED_MODULE_2__.withRateLimit)(secureHandler);\n    }\n    // Apply CORS\n    if (cors) {\n        secureHandler = (0,_cors__WEBPACK_IMPORTED_MODULE_1__.withCors)(secureHandler);\n    }\n    // Apply error handling\n    secureHandler = (0,_errors__WEBPACK_IMPORTED_MODULE_3__.handleAsyncRoute)(secureHandler);\n    return secureHandler;\n}\n/**\n * Input validation middleware\n */ function withValidation(handler, options) {\n    return async (request, context)=>{\n        const nextRequest = request;\n        // Check content length\n        const contentLength = nextRequest.headers.get('content-length');\n        if (contentLength && parseInt(contentLength) > options.maxBodySize) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Payload too large',\n                message: `Request body exceeds maximum size of ${options.maxBodySize} bytes`,\n                statusCode: 413\n            }, {\n                status: 413\n            });\n        }\n        // Validate content type for POST/PUT requests\n        if ([\n            'POST',\n            'PUT',\n            'PATCH'\n        ].includes(request.method)) {\n            const contentType = nextRequest.headers.get('content-type');\n            if (contentType && !contentType.includes('application/json')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Invalid content type',\n                    message: 'Content-Type must be application/json',\n                    statusCode: 415\n                }, {\n                    status: 415\n                });\n            }\n        }\n        // Check for suspicious headers\n        const suspiciousHeaders = [\n            'x-forwarded-host',\n            'x-original-url',\n            'x-rewrite-url'\n        ];\n        for (const header of suspiciousHeaders){\n            if (nextRequest.headers.get(header)) {\n                console.warn(`🚨 Suspicious header detected: ${header}`, {\n                    url: request.url,\n                    ip: nextRequest.headers.get('x-forwarded-for') || 'unknown',\n                    userAgent: nextRequest.headers.get('user-agent') || 'unknown'\n                });\n            }\n        }\n        // Validate URL path\n        const url = new URL(request.url);\n        if (containsSuspiciousPatterns(url.pathname)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid request',\n                message: 'Request contains suspicious patterns',\n                statusCode: 400\n            }, {\n                status: 400\n            });\n        }\n        return handler(request, context);\n    };\n}\n/**\n * Check for suspicious patterns in URL paths\n */ function containsSuspiciousPatterns(path) {\n    const suspiciousPatterns = [\n        /\\.\\./,\n        /\\/\\//,\n        /%2e%2e/i,\n        /%00/i,\n        /\\x00/,\n        /<script/i,\n        /javascript:/i,\n        /vbscript:/i,\n        /data:text\\/html/i,\n        /on\\w+=/i\n    ];\n    return suspiciousPatterns.some((pattern)=>pattern.test(path));\n}\n/**\n * Security headers for API responses\n */ function addSecurityHeaders(response) {\n    // Remove server information\n    response.headers.delete('server');\n    response.headers.delete('x-powered-by');\n    // Add security headers\n    response.headers.set('X-Content-Type-Options', 'nosniff');\n    response.headers.set('X-Frame-Options', 'DENY');\n    response.headers.set('X-XSS-Protection', '1; mode=block');\n    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n    response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n    // Content Security Policy for API\n    response.headers.set('Content-Security-Policy', \"default-src 'none'; frame-ancestors 'none';\");\n    // HSTS in production\n    if (false) {}\n    return response;\n}\n/**\n * Sanitize request body to prevent injection attacks\n */ function sanitizeRequestBody(body) {\n    if (typeof body === 'string') {\n        return sanitizeString(body);\n    }\n    if (Array.isArray(body)) {\n        return body.map((item)=>sanitizeRequestBody(item));\n    }\n    if (body && typeof body === 'object') {\n        const sanitized = {};\n        for (const [key, value] of Object.entries(body)){\n            // Sanitize keys\n            const sanitizedKey = sanitizeString(key);\n            sanitized[sanitizedKey] = sanitizeRequestBody(value);\n        }\n        return sanitized;\n    }\n    return body;\n}\n/**\n * Sanitize string values\n */ function sanitizeString(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    // Remove dangerous patterns\n    return str.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '').replace(/javascript:/gi, '').replace(/vbscript:/gi, '').replace(/data:text\\/html/gi, '').replace(/on\\w+\\s*=/gi, '').trim();\n}\n/**\n * Log security events\n */ function logSecurityEvent(event, details) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        event,\n        severity: details.severity || 'medium',\n        ip: details.ip || 'unknown',\n        userAgent: details.userAgent || 'unknown',\n        ...details\n    };\n    // In production, this would go to a proper logging service\n    if (details.severity === 'high') {\n        console.error('🚨 HIGH SEVERITY SECURITY EVENT:', logEntry);\n    } else if (details.severity === 'medium') {\n        console.warn('⚠️ SECURITY EVENT:', logEntry);\n    } else {\n        console.info('ℹ️ Security event:', logEntry);\n    }\n}\n/**\n * Validate file upload (if needed in the future)\n */ function validateFileUpload(file, options = {}) {\n    const { maxSize = 10 * 1024 * 1024, allowedTypes = [\n        'application/json',\n        'text/plain'\n    ], allowedExtensions = [\n        '.json',\n        '.txt'\n    ] } = options;\n    if (file.size > maxSize) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`File size exceeds maximum of ${maxSize} bytes`);\n    }\n    if (!allowedTypes.includes(file.type)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`File type ${file.type} is not allowed`);\n    }\n    const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n    if (!allowedExtensions.includes(extension)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`File extension ${extension} is not allowed`);\n    }\n}\n/**\n * Generate secure random tokens\n */ function generateSecureToken(length = 32) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    // Use crypto.getRandomValues if available (browser/Node.js)\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n        const array = new Uint8Array(length);\n        crypto.getRandomValues(array);\n        for(let i = 0; i < length; i++){\n            result += chars[array[i] % chars.length];\n        }\n    } else {\n        // Fallback to Math.random (less secure)\n        for(let i = 0; i < length; i++){\n            result += chars[Math.floor(Math.random() * chars.length)];\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/security.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sanitizeInput: () => (/* binding */ sanitizeInput),\n/* harmony export */   validateApiKey: () => (/* binding */ validateApiKey),\n/* harmony export */   validateChatRequest: () => (/* binding */ validateChatRequest),\n/* harmony export */   validateEmail: () => (/* binding */ validateEmail),\n/* harmony export */   validateMCPServerConfig: () => (/* binding */ validateMCPServerConfig),\n/* harmony export */   validateRunToolRequest: () => (/* binding */ validateRunToolRequest),\n/* harmony export */   validateSettings: () => (/* binding */ validateSettings),\n/* harmony export */   validateStringLength: () => (/* binding */ validateStringLength),\n/* harmony export */   validateToolCall: () => (/* binding */ validateToolCall),\n/* harmony export */   validateUrl: () => (/* binding */ validateUrl),\n/* harmony export */   validateUserPreferences: () => (/* binding */ validateUserPreferences)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\nfunction validateChatRequest(data) {\n    if (!data || typeof data !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Request body must be a valid JSON object');\n    }\n    const { messages, sessionId, provider, model, apiKey, baseUrl, systemPrompt, temperature, maxTokens, availableTools } = data;\n    if (!Array.isArray(messages)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages must be an array');\n    }\n    if (messages.length === 0) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages array cannot be empty');\n    }\n    // Validate each message\n    messages.forEach((message, index)=>{\n        if (!message.id || typeof message.id !== 'string' || message.id.trim().length === 0) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have a valid non-empty id`);\n        }\n        // Validate message ID format (prevent injection)\n        if (!/^[a-zA-Z0-9_-]+$/.test(message.id)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} has invalid ID format`);\n        }\n        if (!message.role || ![\n            'user',\n            'assistant',\n            'tool',\n            'system'\n        ].includes(message.role)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have a valid role`);\n        }\n        if (typeof message.content !== 'string') {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have string content`);\n        }\n        // Validate content length\n        validateStringLength(message.content, `Message ${index} content`, 50000);\n        // Sanitize message content to prevent XSS\n        message.content = sanitizeInput(message.content);\n        // Validate timestamp if present\n        if (message.timestamp && !(message.timestamp instanceof Date) && isNaN(Date.parse(message.timestamp))) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} has invalid timestamp`);\n        }\n        // Validate tool calls if present\n        if (message.toolCalls && Array.isArray(message.toolCalls)) {\n            message.toolCalls.forEach((toolCall, toolIndex)=>{\n                validateToolCall(toolCall, `Message ${index}, tool call ${toolIndex}`);\n            });\n        }\n    });\n    if (!sessionId || typeof sessionId !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID must be a valid string');\n    }\n    // Validate session ID format\n    if (!/^[a-zA-Z0-9_-]+$/.test(sessionId)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID contains invalid characters');\n    }\n    validateStringLength(sessionId, 'Session ID', 100);\n    if (!provider || ![\n        'openai',\n        'deepseek',\n        'openrouter'\n    ].includes(provider)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Provider must be one of: openai, deepseek, openrouter');\n    }\n    if (!model || typeof model !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Model must be a valid string');\n    }\n    // Validate optional parameters\n    if (apiKey !== undefined && typeof apiKey !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key must be a string');\n    }\n    if (baseUrl !== undefined && typeof baseUrl !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Base URL must be a string');\n    }\n    if (systemPrompt !== undefined && typeof systemPrompt !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('System prompt must be a string');\n    }\n    if (temperature !== undefined && (typeof temperature !== 'number' || temperature < 0 || temperature > 2)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Temperature must be a number between 0 and 2');\n    }\n    if (maxTokens !== undefined && (typeof maxTokens !== 'number' || maxTokens <= 0)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Max tokens must be a positive number');\n    }\n    if (availableTools !== undefined && !Array.isArray(availableTools)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Available tools must be an array');\n    }\n    return {\n        messages: messages.map((msg)=>({\n                ...msg,\n                timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date()\n            })),\n        sessionId,\n        provider: provider,\n        model,\n        apiKey,\n        baseUrl,\n        systemPrompt,\n        temperature,\n        maxTokens,\n        availableTools\n    };\n}\nfunction validateRunToolRequest(data) {\n    if (!data || typeof data !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Request body must be a valid JSON object');\n    }\n    const { toolCall, sessionId, messages } = data;\n    validateToolCall(toolCall, 'Tool call');\n    if (!sessionId || typeof sessionId !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID must be a valid string');\n    }\n    if (!Array.isArray(messages)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages must be an array');\n    }\n    return {\n        toolCall,\n        sessionId,\n        messages: messages.map((msg)=>({\n                ...msg,\n                timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date()\n            }))\n    };\n}\nfunction validateSettings(data) {\n    if (!data || typeof data !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Settings must be a valid JSON object');\n    }\n    // Validate LLM providers if present\n    if (data.llmProviders) {\n        if (!Array.isArray(data.llmProviders)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('LLM providers must be an array');\n        }\n        data.llmProviders.forEach((provider, index)=>{\n            if (!provider || typeof provider !== 'object') {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} must be a valid object`);\n            }\n            if (!provider.id || typeof provider.id !== 'string') {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} must have a valid id`);\n            }\n            if (!/^[a-zA-Z0-9_-]+$/.test(provider.id)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} has invalid ID format`);\n            }\n            if (!provider.name || ![\n                'openai',\n                'deepseek',\n                'openrouter'\n            ].includes(provider.name)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} must have a valid name`);\n            }\n            // Only validate API key if it's provided, not empty, and not masked\n            if (provider.apiKey && typeof provider.apiKey === 'string' && provider.apiKey.trim() !== '' && !provider.apiKey.includes('*') && !provider.apiKey.includes('•')) {\n                validateApiKey(provider.apiKey, provider.name);\n            }\n            if (provider.baseUrl && typeof provider.baseUrl === 'string') {\n                if (!validateUrl(provider.baseUrl)) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} has invalid base URL`);\n                }\n            }\n        });\n    }\n    // Validate MCP servers if present\n    if (data.mcpServers) {\n        if (!Array.isArray(data.mcpServers)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP servers must be an array');\n        }\n        data.mcpServers.forEach((server, index)=>{\n            try {\n                validateMCPServerConfig(server);\n            } catch (error) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`MCP server at index ${index}: ${error.message}`);\n            }\n        });\n    }\n    // Validate preferences if present\n    if (data.preferences) {\n        try {\n            validateUserPreferences(data.preferences);\n        } catch (error) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`User preferences: ${error.message}`);\n        }\n    }\n    return data;\n}\nfunction sanitizeInput(input) {\n    if (typeof input !== 'string') {\n        return '';\n    }\n    // Enhanced XSS prevention\n    return input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '').replace(/<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi, '').replace(/<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi, '').replace(/javascript:/gi, '').replace(/vbscript:/gi, '').replace(/data:text\\/html/gi, '').replace(/on\\w+\\s*=/gi, '').replace(/style\\s*=\\s*[\"'][^\"']*expression\\s*\\(/gi, '').trim();\n}\nfunction validateStringLength(input, fieldName, maxLength = 1000) {\n    if (input.length > maxLength) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${fieldName} exceeds maximum length of ${maxLength} characters`);\n    }\n}\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\nfunction validateUrl(url) {\n    try {\n        const parsed = new URL(url);\n        return [\n            'http:',\n            'https:'\n        ].includes(parsed.protocol);\n    } catch  {\n        return false;\n    }\n}\nfunction validateToolCall(toolCall, context = 'Tool call') {\n    if (!toolCall || typeof toolCall !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} must be a valid object`);\n    }\n    if (!toolCall.id || typeof toolCall.id !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} must have a valid id`);\n    }\n    // Validate tool call ID format\n    if (!/^[a-zA-Z0-9_-]+$/.test(toolCall.id)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} has invalid ID format`);\n    }\n    if (toolCall.type !== 'function') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} type must be \"function\"`);\n    }\n    if (!toolCall.function || typeof toolCall.function !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} must have a valid function object`);\n    }\n    if (!toolCall.function.name || typeof toolCall.function.name !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function must have a valid name`);\n    }\n    // Validate function name format (prevent injection)\n    if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(toolCall.function.name)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function name has invalid format`);\n    }\n    validateStringLength(toolCall.function.name, `${context} function name`, 100);\n    if (typeof toolCall.function.arguments !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function arguments must be a string`);\n    }\n    // Validate arguments as JSON\n    try {\n        JSON.parse(toolCall.function.arguments);\n    } catch  {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function arguments must be valid JSON`);\n    }\n    validateStringLength(toolCall.function.arguments, `${context} function arguments`, 10000);\n}\nfunction validateApiKey(apiKey, provider) {\n    if (!apiKey || typeof apiKey !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key must be a valid string');\n    }\n    // Basic length validation\n    if (apiKey.length < 10) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key is too short');\n    }\n    if (apiKey.length > 200) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key is too long');\n    }\n    // Provider-specific validation\n    switch(provider){\n        case 'openai':\n            if (!apiKey.startsWith('sk-')) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('OpenAI API key must start with \"sk-\"');\n            }\n            break;\n        case 'deepseek':\n            if (!apiKey.startsWith('sk-')) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('DeepSeek API key must start with \"sk-\"');\n            }\n            break;\n        case 'openrouter':\n            if (!apiKey.startsWith('sk-or-')) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('OpenRouter API key must start with \"sk-or-\"');\n            }\n            break;\n    }\n    // Check for suspicious patterns\n    const suspiciousPatterns = [\n        /\\s/,\n        /[<>]/,\n        /javascript:/i,\n        /data:/i\n    ];\n    for (const pattern of suspiciousPatterns){\n        if (pattern.test(apiKey)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key contains invalid characters');\n        }\n    }\n}\nfunction validateMCPServerConfig(config) {\n    if (!config || typeof config !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must be a valid object');\n    }\n    if (!config.id || typeof config.id !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must have a valid id');\n    }\n    // Validate ID format\n    if (!/^[a-zA-Z0-9_-]+$/.test(config.id)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config ID has invalid format');\n    }\n    if (!config.name || typeof config.name !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must have a valid name');\n    }\n    validateStringLength(config.name, 'MCP server name', 100);\n    if (!config.command || typeof config.command !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must have a valid command');\n    }\n    // Validate command (prevent command injection)\n    if (!/^[a-zA-Z0-9_./\\-]+$/.test(config.command)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server command contains invalid characters');\n    }\n    if (!Array.isArray(config.args)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server args must be an array');\n    }\n    // Validate each argument\n    config.args.forEach((arg, index)=>{\n        if (typeof arg !== 'string') {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`MCP server arg at index ${index} must be a string`);\n        }\n        validateStringLength(arg, `MCP server arg ${index}`, 500);\n    });\n    // Validate environment variables if present\n    if (config.env && typeof config.env === 'object') {\n        Object.entries(config.env).forEach(([key, value])=>{\n            if (typeof key !== 'string' || typeof value !== 'string') {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server environment variables must be strings');\n            }\n            // Validate environment variable names\n            if (!/^[A-Z_][A-Z0-9_]*$/.test(key)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid environment variable name: ${key}`);\n            }\n            validateStringLength(key, 'Environment variable name', 100);\n            validateStringLength(value, 'Environment variable value', 1000);\n        });\n    }\n}\nfunction validateUserPreferences(preferences) {\n    if (!preferences || typeof preferences !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('User preferences must be a valid object');\n    }\n    if (preferences.theme && ![\n        'light',\n        'dark',\n        'system'\n    ].includes(preferences.theme)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Theme must be one of: light, dark, system');\n    }\n    if (preferences.language && ![\n        'en',\n        'zh'\n    ].includes(preferences.language)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Language must be one of: en, zh');\n    }\n    if (preferences.autoScroll !== undefined && typeof preferences.autoScroll !== 'boolean') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('autoScroll must be a boolean');\n    }\n    if (preferences.soundEnabled !== undefined && typeof preferences.soundEnabled !== 'boolean') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('soundEnabled must be a boolean');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/ChatProcessor.ts":
/*!***************************************!*\
  !*** ./src/services/ChatProcessor.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatProcessor: () => (/* binding */ ChatProcessor),\n/* harmony export */   createChatProcessor: () => (/* binding */ createChatProcessor),\n/* harmony export */   estimateTokenCount: () => (/* binding */ estimateTokenCount),\n/* harmony export */   getLastUserMessage: () => (/* binding */ getLastUserMessage),\n/* harmony export */   truncateMessageHistory: () => (/* binding */ truncateMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n\nclass ChatProcessor {\n    constructor(llmService, sessionManager){\n        this.llmService = llmService;\n        this.sessionManager = sessionManager;\n    }\n    /**\n   * Process a chat query with full message history management and tool call detection\n   */ async processQuery(request) {\n        try {\n            // Validate the request\n            this.validateProcessQueryRequest(request);\n            // Get or create session\n            let session;\n            try {\n                session = await this.sessionManager.getSession(request.sessionId);\n            } catch (error) {\n                // If session doesn't exist, create a new one\n                session = await this.sessionManager.createSession(request.provider, request.model, [], request.messages[0] // First message as initial message\n                );\n            }\n            // Construct the complete message history with system prompt\n            const messageHistory = this.constructMessageHistory(request.messages, request.systemPrompt, request.availableTools);\n            // Prepare LLM completion request\n            const llmRequest = {\n                messages: messageHistory.map((msg)=>({\n                        role: msg.role,\n                        content: msg.content,\n                        tool_calls: msg.toolCalls,\n                        tool_call_id: msg.toolCallId\n                    })),\n                model: request.model,\n                temperature: request.temperature ?? 0.7,\n                maxTokens: request.maxTokens ?? 1000\n            };\n            // Add tools if available\n            if (request.availableTools && request.availableTools.length > 0) {\n                llmRequest.tools = this.formatToolsForLLM(request.availableTools);\n                llmRequest.toolChoice = 'auto';\n            }\n            // Generate completion\n            const completion = await this.llmService.generateCompletion(llmRequest);\n            // Process the response\n            const response = {\n                sessionId: request.sessionId,\n                reply: completion.content,\n                toolCalls: completion.toolCalls,\n                usage: completion.usage,\n                finishReason: completion.finishReason\n            };\n            // Update session with new messages\n            await this.updateSessionWithResponse(request.sessionId, request.messages, completion);\n            return response;\n        } catch (error) {\n            console.error('Chat processing error:', error);\n            if (error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError) {\n                throw error;\n            }\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.InternalServerError(`Failed to process chat query: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Process a streaming chat query (placeholder for future streaming implementation)\n   */ async processStreamingQuery(request) {\n        // For now, return a generator that yields the complete response\n        // This can be enhanced later to support true streaming\n        const response = await this.processQuery(request);\n        async function* streamGenerator() {\n            yield {\n                ...response,\n                isStreaming: true,\n                streamId: `stream_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n            };\n        }\n        return streamGenerator();\n    }\n    /**\n   * Construct system prompt based on available tools and context\n   */ constructSystemPrompt(availableTools, customPrompt) {\n        const basePrompt = customPrompt || `You are a helpful AI assistant with access to various tools through the Model Context Protocol (MCP). \n\nWhen you need to use a tool to help the user, you should:\n1. Explain what you're going to do\n2. Call the appropriate tool with the correct parameters\n3. Wait for the tool result\n4. Interpret and explain the results to the user\n\nAlways be clear about what tools you're using and why. If a tool call fails, explain the error and suggest alternatives if possible.`;\n        if (!availableTools || availableTools.length === 0) {\n            return basePrompt;\n        }\n        const toolDescriptions = availableTools.map((tool)=>`- ${tool.name}: ${tool.description}`).join('\\n');\n        return `${basePrompt}\n\nAvailable tools:\n${toolDescriptions}\n\nUse these tools when they can help answer the user's questions or complete their requests.`;\n    }\n    /**\n   * Construct complete message history with system prompt\n   */ constructMessageHistory(messages, systemPrompt, availableTools) {\n        const history = [];\n        // Add system prompt if provided or if tools are available\n        if (systemPrompt || availableTools && availableTools.length > 0) {\n            const finalSystemPrompt = this.constructSystemPrompt(availableTools, systemPrompt);\n            history.push({\n                id: `system_${Date.now()}`,\n                role: 'system',\n                content: finalSystemPrompt,\n                timestamp: new Date()\n            });\n        }\n        // Add all user messages, maintaining conversation flow\n        history.push(...messages);\n        return history;\n    }\n    /**\n   * Format MCP tools for LLM API\n   */ formatToolsForLLM(tools) {\n        return tools.map((tool)=>({\n                type: 'function',\n                function: {\n                    name: tool.name,\n                    description: tool.description,\n                    parameters: tool.inputSchema\n                }\n            }));\n    }\n    /**\n   * Update session with new messages and LLM response\n   */ async updateSessionWithResponse(sessionId, userMessages, completion) {\n        try {\n            // Add user messages to session\n            for (const message of userMessages){\n                await this.sessionManager.addMessage(sessionId, message);\n            }\n            // Add assistant response\n            if (completion.content || completion.toolCalls) {\n                const assistantMessage = {\n                    id: `assistant_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n                    role: 'assistant',\n                    content: completion.content || '',\n                    timestamp: new Date(),\n                    toolCalls: completion.toolCalls\n                };\n                await this.sessionManager.addMessage(sessionId, assistantMessage);\n            }\n            // Generate session title if this is a new conversation\n            const session = await this.sessionManager.getSession(sessionId);\n            if (session.title === 'New Chat' && session.messages.length >= 2) {\n                try {\n                    await this.sessionManager.generateSessionTitle(sessionId, this.llmService);\n                } catch (error) {\n                    console.warn('Failed to generate session title:', error);\n                // Continue without failing the entire request\n                }\n            }\n        } catch (error) {\n            console.error('Failed to update session:', error);\n        // Don't throw here as the main processing was successful\n        }\n    }\n    /**\n   * Validate process query request\n   */ validateProcessQueryRequest(request) {\n        if (!request.messages || !Array.isArray(request.messages)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages must be an array');\n        }\n        if (request.messages.length === 0) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages array cannot be empty');\n        }\n        if (!request.sessionId || typeof request.sessionId !== 'string') {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID must be a valid string');\n        }\n        if (!request.provider || ![\n            'openai',\n            'deepseek',\n            'openrouter'\n        ].includes(request.provider)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Provider must be one of: openai, deepseek, openrouter');\n        }\n        if (!request.model || typeof request.model !== 'string') {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Model must be a valid string');\n        }\n        // Validate each message\n        request.messages.forEach((message, index)=>{\n            if (!message.id || typeof message.id !== 'string') {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have a valid id`);\n            }\n            if (!message.role || ![\n                'user',\n                'assistant',\n                'tool',\n                'system'\n            ].includes(message.role)) {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have a valid role`);\n            }\n            if (typeof message.content !== 'string') {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have string content`);\n            }\n        });\n        // Validate optional parameters\n        if (request.temperature !== undefined && (request.temperature < 0 || request.temperature > 2)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Temperature must be between 0 and 2');\n        }\n        if (request.maxTokens !== undefined && request.maxTokens <= 0) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Max tokens must be positive');\n        }\n    }\n    /**\n   * Detect if a message contains tool calls that need confirmation\n   */ static detectToolCalls(message) {\n        return message.toolCalls || [];\n    }\n    /**\n   * Format tool call for user confirmation\n   */ static formatToolCallForConfirmation(toolCall) {\n        let parameters = {};\n        try {\n            parameters = JSON.parse(toolCall.function.arguments);\n        } catch (error) {\n            console.warn('Failed to parse tool call arguments:', error);\n            parameters = {\n                raw_arguments: toolCall.function.arguments\n            };\n        }\n        return {\n            name: toolCall.function.name,\n            description: `Execute ${toolCall.function.name} with the provided parameters`,\n            parameters\n        };\n    }\n    /**\n   * Create a tool result message\n   */ static createToolResultMessage(toolCallId, result, isError = false) {\n        return {\n            id: `tool_result_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            role: 'tool',\n            content: isError ? `Error: ${result}` : result,\n            timestamp: new Date(),\n            toolCallId\n        };\n    }\n}\n/**\n * Factory function to create ChatProcessor instances\n */ function createChatProcessor(llmService, sessionManager) {\n    return new ChatProcessor(llmService, sessionManager);\n}\n/**\n * Utility function to extract the last user message from a conversation\n */ function getLastUserMessage(messages) {\n    for(let i = messages.length - 1; i >= 0; i--){\n        if (messages[i].role === 'user') {\n            return messages[i];\n        }\n    }\n    return null;\n}\n/**\n * Utility function to count tokens in messages (rough estimation)\n */ function estimateTokenCount(messages) {\n    // Rough estimation: 1 token ≈ 4 characters for English text\n    const totalChars = messages.reduce((sum, msg)=>sum + msg.content.length, 0);\n    return Math.ceil(totalChars / 4);\n}\n/**\n * Utility function to truncate message history to fit within token limits\n */ function truncateMessageHistory(messages, maxTokens, preserveSystemMessage = true) {\n    if (messages.length === 0) return messages;\n    let truncatedMessages = [\n        ...messages\n    ];\n    let currentTokens = estimateTokenCount(truncatedMessages);\n    // Always preserve the system message if requested\n    const systemMessageIndex = preserveSystemMessage ? truncatedMessages.findIndex((msg)=>msg.role === 'system') : -1;\n    // Remove messages from the middle (keeping recent context) until under limit\n    while(currentTokens > maxTokens && truncatedMessages.length > 1){\n        // Find the oldest non-system message to remove\n        let indexToRemove = -1;\n        for(let i = 0; i < truncatedMessages.length; i++){\n            if (i !== systemMessageIndex && truncatedMessages[i].role !== 'system') {\n                indexToRemove = i;\n                break;\n            }\n        }\n        if (indexToRemove === -1) break; // No more messages to remove\n        truncatedMessages.splice(indexToRemove, 1);\n        currentTokens = estimateTokenCount(truncatedMessages);\n    }\n    return truncatedMessages;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/ChatProcessor.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/LLMService.ts":
/*!************************************!*\
  !*** ./src/services/LLMService.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMService: () => (/* binding */ LLMService),\n/* harmony export */   createLLMService: () => (/* binding */ createLLMService),\n/* harmony export */   getDefaultProviderConfig: () => (/* binding */ getDefaultProviderConfig),\n/* harmony export */   getProviderModels: () => (/* binding */ getProviderModels),\n/* harmony export */   testLLMProviderConnection: () => (/* binding */ testLLMProviderConnection),\n/* harmony export */   validateProviderConfig: () => (/* binding */ validateProviderConfig)\n/* harmony export */ });\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n\nclass LLMService {\n    static{\n        this.DEFAULT_MAX_RETRIES = 3;\n    }\n    static{\n        this.DEFAULT_RETRY_DELAY = 1000; // 1 second\n    }\n    static{\n        this.DEFAULT_TIMEOUT = 30000; // 30 seconds\n    }\n    constructor(config){\n        this.config = {\n            maxRetries: LLMService.DEFAULT_MAX_RETRIES,\n            retryDelay: LLMService.DEFAULT_RETRY_DELAY,\n            timeout: LLMService.DEFAULT_TIMEOUT,\n            ...config\n        };\n        this.validateConfig();\n    }\n    /**\n   * Generate a completion using the configured LLM provider with retry logic\n   */ async generateCompletion(request) {\n        return this.executeWithRetry(async ()=>{\n            switch(this.config.provider){\n                case 'openai':\n                    return await this.callOpenAI(request);\n                case 'deepseek':\n                    return await this.callDeepSeek(request);\n                case 'openrouter':\n                    return await this.callOpenRouter(request);\n                default:\n                    throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Unsupported LLM provider: ${this.config.provider}`);\n            }\n        });\n    }\n    /**\n   * Test the connection to the LLM provider\n   */ async testConnection() {\n        try {\n            const response = await this.generateCompletion({\n                messages: [\n                    {\n                        role: 'user',\n                        content: 'Hello'\n                    }\n                ],\n                maxTokens: 5,\n                temperature: 0\n            });\n            return {\n                success: !!response.content\n            };\n        } catch (error) {\n            console.error('Connection test failed:', error);\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    }\n    /**\n   * Get provider capabilities\n   */ getProviderCapabilities() {\n        switch(this.config.provider){\n            case 'openai':\n                return {\n                    supportsToolCalling: true,\n                    supportsStreaming: true,\n                    maxTokens: 128000,\n                    supportedModels: [\n                        'gpt-4',\n                        'gpt-4-turbo',\n                        'gpt-3.5-turbo'\n                    ]\n                };\n            case 'deepseek':\n                return {\n                    supportsToolCalling: true,\n                    supportsStreaming: true,\n                    maxTokens: 32000,\n                    supportedModels: [\n                        'deepseek-chat',\n                        'deepseek-coder'\n                    ]\n                };\n            case 'openrouter':\n                return {\n                    supportsToolCalling: true,\n                    supportsStreaming: true,\n                    maxTokens: 200000,\n                    supportedModels: [\n                        'anthropic/claude-3-opus',\n                        'openai/gpt-4',\n                        'meta-llama/llama-2-70b-chat'\n                    ]\n                };\n            default:\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Unsupported LLM provider: ${this.config.provider}`);\n        }\n    }\n    /**\n   * Validate API key format for the provider\n   */ validateApiKey(apiKey) {\n        if (!apiKey || typeof apiKey !== 'string') {\n            return false;\n        }\n        switch(this.config.provider){\n            case 'openai':\n                return apiKey.startsWith('sk-') && apiKey.length > 20;\n            case 'deepseek':\n                return apiKey.startsWith('sk-') && apiKey.length > 20;\n            case 'openrouter':\n                return apiKey.startsWith('sk-or-') && apiKey.length > 30;\n            default:\n                return apiKey.length > 10; // Basic length check for unknown providers\n        }\n    }\n    /**\n   * Execute a function with retry logic for transient errors\n   */ async executeWithRetry(fn) {\n        let lastError = new Error('Unknown error');\n        const maxRetries = this.config.maxRetries || LLMService.DEFAULT_MAX_RETRIES;\n        for(let attempt = 0; attempt <= maxRetries; attempt++){\n            try {\n                return await this.withTimeout(fn(), this.config.timeout || LLMService.DEFAULT_TIMEOUT);\n            } catch (error) {\n                lastError = error;\n                // Don't retry on validation errors or non-retryable errors\n                if (error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError || !this.isRetryableError(error)) {\n                    throw error;\n                }\n                // Don't retry on the last attempt\n                if (attempt === maxRetries) {\n                    break;\n                }\n                // Wait before retrying with exponential backoff\n                const delay = (this.config.retryDelay || LLMService.DEFAULT_RETRY_DELAY) * Math.pow(2, attempt);\n                await this.sleep(delay);\n                console.warn(`LLM request attempt ${attempt + 1} failed, retrying in ${delay}ms:`, error);\n            }\n        }\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.InternalServerError(`LLM request failed after ${maxRetries + 1} attempts: ${lastError.message}`);\n    }\n    /**\n   * Determine if an error is retryable\n   */ isRetryableError(error) {\n        const llmError = error;\n        // Explicitly marked as retryable\n        if (llmError.retryable !== undefined) {\n            return llmError.retryable;\n        }\n        // Network errors are generally retryable\n        if (error.message.includes('fetch') || error.message.includes('network')) {\n            return true;\n        }\n        // HTTP status codes that are retryable\n        if (llmError.statusCode) {\n            return [\n                408,\n                429,\n                500,\n                502,\n                503,\n                504\n            ].includes(llmError.statusCode);\n        }\n        // Rate limit errors\n        if (error.message.toLowerCase().includes('rate limit')) {\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Add timeout to a promise\n   */ withTimeout(promise, timeoutMs) {\n        return Promise.race([\n            promise,\n            new Promise((_, reject)=>{\n                setTimeout(()=>reject(new Error(`Request timeout after ${timeoutMs}ms`)), timeoutMs);\n            })\n        ]);\n    }\n    /**\n   * Sleep for specified milliseconds\n   */ sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    validateConfig() {\n        if (!this.config.apiKey) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key is required');\n        }\n        if (!this.config.model) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Model is required');\n        }\n        if (![\n            'openai',\n            'deepseek',\n            'openrouter'\n        ].includes(this.config.provider)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Invalid LLM provider');\n        }\n        if (!this.validateApiKey(this.config.apiKey)) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid API key format for ${this.config.provider}`);\n        }\n        if (this.config.maxRetries !== undefined && this.config.maxRetries < 0) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Max retries must be non-negative');\n        }\n        if (this.config.retryDelay !== undefined && this.config.retryDelay < 0) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Retry delay must be non-negative');\n        }\n        if (this.config.timeout !== undefined && this.config.timeout <= 0) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Timeout must be positive');\n        }\n    }\n    async callOpenAI(request) {\n        const baseUrl = this.config.baseUrl || 'https://api.openai.com/v1';\n        const url = `${baseUrl}/chat/completions`;\n        const requestBody = {\n            model: request.model || this.config.model,\n            messages: request.messages,\n            max_tokens: request.maxTokens || 1000,\n            temperature: request.temperature ?? 0.7\n        };\n        // Add tool support if tools are provided\n        if (request.tools && request.tools.length > 0) {\n            requestBody.tools = request.tools;\n            if (request.toolChoice) {\n                requestBody.tool_choice = request.toolChoice;\n            }\n        }\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'User-Agent': 'MCP-Chat-UI/1.0'\n            },\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            let errorData;\n            try {\n                errorData = JSON.parse(errorText);\n            } catch  {\n                errorData = {\n                    error: {\n                        message: errorText\n                    }\n                };\n            }\n            const error = new Error(`OpenAI API error: ${errorData.error?.message || errorText}`);\n            error.statusCode = response.status;\n            error.code = errorData.error?.code;\n            error.retryable = [\n                408,\n                429,\n                500,\n                502,\n                503,\n                504\n            ].includes(response.status);\n            throw error;\n        }\n        const data = await response.json();\n        const choice = data.choices[0];\n        if (!choice) {\n            throw new Error('No response choices returned from OpenAI API');\n        }\n        return {\n            content: choice.message?.content || '',\n            toolCalls: choice.message?.tool_calls?.map((tc)=>({\n                    id: tc.id,\n                    type: tc.type,\n                    function: {\n                        name: tc.function.name,\n                        arguments: tc.function.arguments\n                    }\n                })),\n            usage: data.usage ? {\n                promptTokens: data.usage.prompt_tokens,\n                completionTokens: data.usage.completion_tokens,\n                totalTokens: data.usage.total_tokens\n            } : undefined,\n            finishReason: choice.finish_reason\n        };\n    }\n    async callDeepSeek(request) {\n        const baseUrl = this.config.baseUrl || 'https://api.deepseek.com/v1';\n        const url = `${baseUrl}/chat/completions`;\n        const requestBody = {\n            model: request.model || this.config.model,\n            messages: request.messages,\n            max_tokens: request.maxTokens || 1000,\n            temperature: request.temperature ?? 0.7\n        };\n        // Add tool support if tools are provided\n        if (request.tools && request.tools.length > 0) {\n            requestBody.tools = request.tools;\n            if (request.toolChoice) {\n                requestBody.tool_choice = request.toolChoice;\n            }\n        }\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'User-Agent': 'MCP-Chat-UI/1.0'\n            },\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            let errorData;\n            try {\n                errorData = JSON.parse(errorText);\n            } catch  {\n                errorData = {\n                    error: {\n                        message: errorText\n                    }\n                };\n            }\n            const error = new Error(`DeepSeek API error: ${errorData.error?.message || errorText}`);\n            error.statusCode = response.status;\n            error.code = errorData.error?.code;\n            error.retryable = [\n                408,\n                429,\n                500,\n                502,\n                503,\n                504\n            ].includes(response.status);\n            throw error;\n        }\n        const data = await response.json();\n        const choice = data.choices[0];\n        if (!choice) {\n            throw new Error('No response choices returned from DeepSeek API');\n        }\n        return {\n            content: choice.message?.content || '',\n            toolCalls: choice.message?.tool_calls?.map((tc)=>({\n                    id: tc.id,\n                    type: tc.type,\n                    function: {\n                        name: tc.function.name,\n                        arguments: tc.function.arguments\n                    }\n                })),\n            usage: data.usage ? {\n                promptTokens: data.usage.prompt_tokens,\n                completionTokens: data.usage.completion_tokens,\n                totalTokens: data.usage.total_tokens\n            } : undefined,\n            finishReason: choice.finish_reason\n        };\n    }\n    async callOpenRouter(request) {\n        const baseUrl = this.config.baseUrl || 'https://openrouter.ai/api/v1';\n        const url = `${baseUrl}/chat/completions`;\n        const requestBody = {\n            model: request.model || this.config.model,\n            messages: request.messages,\n            max_tokens: request.maxTokens || 1000,\n            temperature: request.temperature ?? 0.7\n        };\n        // Add tool support if tools are provided\n        if (request.tools && request.tools.length > 0) {\n            requestBody.tools = request.tools;\n            if (request.toolChoice) {\n                requestBody.tool_choice = request.toolChoice;\n            }\n        }\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.config.apiKey}`,\n                'HTTP-Referer': 'http://localhost:3000',\n                'X-Title': 'MCP Chat UI',\n                'User-Agent': 'MCP-Chat-UI/1.0'\n            },\n            body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            let errorData;\n            try {\n                errorData = JSON.parse(errorText);\n            } catch  {\n                errorData = {\n                    error: {\n                        message: errorText\n                    }\n                };\n            }\n            const error = new Error(`OpenRouter API error: ${errorData.error?.message || errorText}`);\n            error.statusCode = response.status;\n            error.code = errorData.error?.code;\n            error.retryable = [\n                408,\n                429,\n                500,\n                502,\n                503,\n                504\n            ].includes(response.status);\n            throw error;\n        }\n        const data = await response.json();\n        const choice = data.choices[0];\n        if (!choice) {\n            throw new Error('No response choices returned from OpenRouter API');\n        }\n        return {\n            content: choice.message?.content || '',\n            toolCalls: choice.message?.tool_calls?.map((tc)=>({\n                    id: tc.id,\n                    type: tc.type,\n                    function: {\n                        name: tc.function.name,\n                        arguments: tc.function.arguments\n                    }\n                })),\n            usage: data.usage ? {\n                promptTokens: data.usage.prompt_tokens,\n                completionTokens: data.usage.completion_tokens,\n                totalTokens: data.usage.total_tokens\n            } : undefined,\n            finishReason: choice.finish_reason\n        };\n    }\n}\n/**\n * Factory function to create LLM service instances\n */ function createLLMService(config) {\n    return new LLMService(config);\n}\n/**\n * Get default configuration for a provider\n */ function getDefaultProviderConfig(provider) {\n    switch(provider){\n        case 'openai':\n            return {\n                baseUrl: 'https://api.openai.com/v1',\n                model: 'gpt-4',\n                maxRetries: 3,\n                retryDelay: 1000,\n                timeout: 30000\n            };\n        case 'deepseek':\n            return {\n                baseUrl: 'https://api.deepseek.com/v1',\n                model: 'deepseek-chat',\n                maxRetries: 3,\n                retryDelay: 1000,\n                timeout: 30000\n            };\n        case 'openrouter':\n            return {\n                baseUrl: 'https://openrouter.ai/api/v1',\n                model: 'openai/gpt-4',\n                maxRetries: 3,\n                retryDelay: 1000,\n                timeout: 45000\n            };\n        default:\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Unsupported provider: ${provider}`);\n    }\n}\n/**\n * Validate provider configuration\n */ function validateProviderConfig(config) {\n    const errors = [];\n    if (!config.provider) {\n        errors.push('Provider is required');\n    } else if (![\n        'openai',\n        'deepseek',\n        'openrouter'\n    ].includes(config.provider)) {\n        errors.push('Invalid provider');\n    }\n    if (!config.apiKey) {\n        errors.push('API key is required');\n    } else if (config.provider) {\n        const service = new LLMService({\n            ...config,\n            model: 'test'\n        });\n        if (!service.validateApiKey(config.apiKey)) {\n            errors.push(`Invalid API key format for ${config.provider}`);\n        }\n    }\n    if (!config.model) {\n        errors.push('Model is required');\n    }\n    if (config.maxRetries !== undefined && config.maxRetries < 0) {\n        errors.push('Max retries must be non-negative');\n    }\n    if (config.retryDelay !== undefined && config.retryDelay < 0) {\n        errors.push('Retry delay must be non-negative');\n    }\n    if (config.timeout !== undefined && config.timeout <= 0) {\n        errors.push('Timeout must be positive');\n    }\n    return errors;\n}\n/**\n * Get available models for a provider\n */ function getProviderModels(provider) {\n    switch(provider){\n        case 'openai':\n            return [\n                {\n                    id: 'gpt-4',\n                    name: 'GPT-4',\n                    supportsToolCalling: true\n                },\n                {\n                    id: 'gpt-4-turbo',\n                    name: 'GPT-4 Turbo',\n                    supportsToolCalling: true\n                },\n                {\n                    id: 'gpt-3.5-turbo',\n                    name: 'GPT-3.5 Turbo',\n                    supportsToolCalling: true\n                }\n            ];\n        case 'deepseek':\n            return [\n                {\n                    id: 'deepseek-chat',\n                    name: 'DeepSeek Chat',\n                    supportsToolCalling: true\n                },\n                {\n                    id: 'deepseek-coder',\n                    name: 'DeepSeek Coder',\n                    supportsToolCalling: true\n                }\n            ];\n        case 'openrouter':\n            return [\n                {\n                    id: 'openai/gpt-4',\n                    name: 'GPT-4 (via OpenRouter)',\n                    supportsToolCalling: true\n                },\n                {\n                    id: 'anthropic/claude-3-opus',\n                    name: 'Claude 3 Opus',\n                    supportsToolCalling: true\n                },\n                {\n                    id: 'meta-llama/llama-2-70b-chat',\n                    name: 'Llama 2 70B',\n                    supportsToolCalling: false\n                }\n            ];\n        default:\n            return [];\n    }\n}\n/**\n *\n Test LLM provider connection\n */ async function testLLMProviderConnection(provider) {\n    if (!provider.apiKey) {\n        return {\n            success: false,\n            error: 'API key is required'\n        };\n    }\n    const baseUrl = provider.baseUrl || getDefaultProviderConfig(provider.name).baseUrl;\n    try {\n        // Create a minimal test request\n        const testPayload = {\n            model: provider.models[0]?.id || getDefaultModelForProvider(provider.name),\n            messages: [\n                {\n                    role: 'user',\n                    content: 'Hello'\n                }\n            ],\n            max_tokens: 5,\n            temperature: 0\n        };\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        // Set authorization header based on provider\n        if (provider.name === 'openai' || provider.name === 'deepseek') {\n            headers['Authorization'] = `Bearer ${provider.apiKey}`;\n        } else if (provider.name === 'openrouter') {\n            headers['Authorization'] = `Bearer ${provider.apiKey}`;\n            headers['HTTP-Referer'] = 'https://mcp-chat-ui.local';\n            headers['X-Title'] = 'MCP Chat UI';\n        }\n        const response = await fetch(`${baseUrl}/chat/completions`, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(testPayload)\n        });\n        if (response.ok) {\n            return {\n                success: true\n            };\n        } else {\n            const errorData = await response.json().catch(()=>({}));\n            const errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;\n            return {\n                success: false,\n                error: errorMessage\n            };\n        }\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Network error occurred';\n        return {\n            success: false,\n            error: errorMessage\n        };\n    }\n}\n/**\n * Helper function to get default model for provider\n */ function getDefaultModelForProvider(provider) {\n    const defaultModels = {\n        openai: 'gpt-3.5-turbo',\n        deepseek: 'deepseek-chat',\n        openrouter: 'openai/gpt-3.5-turbo'\n    };\n    return defaultModels[provider] || 'gpt-3.5-turbo';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/LLMService.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/SessionManager.ts":
/*!****************************************!*\
  !*** ./src/services/SessionManager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager),\n/* harmony export */   getSessionManager: () => (/* binding */ getSessionManager),\n/* harmony export */   initializeSessionManager: () => (/* binding */ initializeSessionManager)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_encryption__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/encryption */ \"(rsc)/./src/lib/encryption.ts\");\n\n\n\n\nclass SessionManager {\n    constructor(storageDir = './data/sessions', maxSessions = 1000, cleanupIntervalMs = 24 * 60 * 60 * 1000 // 24 hours\n    ){\n        this.encryptionService = (0,_lib_encryption__WEBPACK_IMPORTED_MODULE_3__.getEncryptionService)();\n        this.storageDir = storageDir;\n        this.storageFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(storageDir, 'sessions.json');\n        this.maxSessions = maxSessions;\n        this.cleanupIntervalMs = cleanupIntervalMs;\n        this.storage = {\n            sessions: {},\n            metadata: {\n                lastCleanup: new Date().toISOString(),\n                totalSessions: 0,\n                version: '1.0.0',\n                encrypted: false\n            }\n        };\n    }\n    /**\n   * Initialize the session manager and load existing sessions\n   */ async initialize() {\n        try {\n            await this.ensureStorageDirectory();\n            await this.loadSessions();\n            this.startCleanupTimer();\n        } catch (error) {\n            console.error('Failed to initialize SessionManager:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to initialize session storage');\n        }\n    }\n    /**\n   * Create a new chat session\n   */ async createSession(provider, model, mcpServers = [], initialMessage) {\n        const sessionId = this.generateSessionId();\n        const now = new Date();\n        const session = {\n            id: sessionId,\n            title: 'New Chat',\n            messages: initialMessage ? [\n                initialMessage\n            ] : [],\n            createdAt: now,\n            updatedAt: now,\n            provider,\n            model,\n            mcpServers\n        };\n        this.storage.sessions[sessionId] = session;\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        await this.saveSessions();\n        return session;\n    }\n    /**\n   * Get a session by ID\n   */ async getSession(sessionId) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        return {\n            ...session\n        }; // Return a copy to prevent mutations\n    }\n    /**\n   * Update an existing session\n   */ async updateSession(sessionId, updates) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        // Prevent updating immutable fields\n        const { id, createdAt, ...allowedUpdates } = updates;\n        const updatedSession = {\n            ...session,\n            ...allowedUpdates,\n            updatedAt: new Date()\n        };\n        this.storage.sessions[sessionId] = updatedSession;\n        await this.saveSessions();\n        return {\n            ...updatedSession\n        };\n    }\n    /**\n   * Add a message to a session\n   */ async addMessage(sessionId, message) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        session.messages.push(message);\n        session.updatedAt = new Date();\n        this.storage.sessions[sessionId] = session;\n        await this.saveSessions();\n        return {\n            ...session\n        };\n    }\n    /**\n   * Delete a session\n   */ async deleteSession(sessionId) {\n        if (!this.storage.sessions[sessionId]) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        delete this.storage.sessions[sessionId];\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        await this.saveSessions();\n    }\n    /**\n   * Search and filter sessions\n   */ async searchSessions(options = {}) {\n        const { query, provider, limit = 50, offset = 0, sortBy = 'updatedAt', sortOrder = 'desc' } = options;\n        let sessions = Object.values(this.storage.sessions);\n        // Apply filters\n        if (query) {\n            const searchQuery = query.toLowerCase();\n            sessions = sessions.filter((session)=>session.title.toLowerCase().includes(searchQuery) || session.messages.some((msg)=>msg.content.toLowerCase().includes(searchQuery)));\n        }\n        if (provider) {\n            sessions = sessions.filter((session)=>session.provider === provider);\n        }\n        // Sort sessions\n        sessions.sort((a, b)=>{\n            const aValue = a[sortBy];\n            const bValue = b[sortBy];\n            let comparison = 0;\n            if (aValue instanceof Date && bValue instanceof Date) {\n                comparison = aValue.getTime() - bValue.getTime();\n            } else {\n                comparison = String(aValue).localeCompare(String(bValue));\n            }\n            return sortOrder === 'desc' ? -comparison : comparison;\n        });\n        const total = sessions.length;\n        const paginatedSessions = sessions.slice(offset, offset + limit);\n        // Convert to summary format\n        const sessionSummaries = paginatedSessions.map((session)=>({\n                id: session.id,\n                title: session.title,\n                createdAt: session.createdAt.toISOString(),\n                updatedAt: session.updatedAt.toISOString(),\n                messageCount: session.messages.length,\n                provider: session.provider,\n                model: session.model\n            }));\n        return {\n            sessions: sessionSummaries,\n            total,\n            hasMore: offset + limit < total\n        };\n    }\n    /**\n   * Generate automatic session title using LLM\n   */ async generateSessionTitle(sessionId, llmService) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        // If no LLM service provided or no messages, use fallback\n        if (!llmService || session.messages.length === 0) {\n            return this.generateFallbackTitle(session);\n        }\n        try {\n            // Get first few messages for context\n            const contextMessages = session.messages.filter((msg)=>msg.role === 'user' || msg.role === 'assistant').slice(0, 4).map((msg)=>`${msg.role}: ${msg.content.substring(0, 200)}`).join('\\n');\n            const titlePrompt = `Based on this conversation, generate a concise, descriptive title (max 50 characters):\n\n${contextMessages}\n\nTitle:`;\n            const response = await llmService.generateCompletion({\n                messages: [\n                    {\n                        role: 'user',\n                        content: titlePrompt\n                    }\n                ],\n                maxTokens: 20,\n                temperature: 0.3\n            });\n            const generatedTitle = response.content?.trim().replace(/^[\"']|[\"']$/g, '') // Remove quotes\n            .substring(0, 50) // Ensure max length\n             || this.generateFallbackTitle(session);\n            // Update session with new title\n            await this.updateSession(sessionId, {\n                title: generatedTitle\n            });\n            return generatedTitle;\n        } catch (error) {\n            console.error('Failed to generate session title:', error);\n            return this.generateFallbackTitle(session);\n        }\n    }\n    /**\n   * Clean up old sessions based on age and count limits\n   */ async cleanupSessions() {\n        const sessions = Object.values(this.storage.sessions);\n        const now = new Date();\n        const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days\n        let deletedCount = 0;\n        // Delete sessions older than maxAge\n        const oldSessions = sessions.filter((session)=>now.getTime() - session.updatedAt.getTime() > maxAge);\n        for (const session of oldSessions){\n            delete this.storage.sessions[session.id];\n            deletedCount++;\n        }\n        // If still over limit, delete oldest sessions\n        const remainingSessions = Object.values(this.storage.sessions);\n        if (remainingSessions.length > this.maxSessions) {\n            const sortedSessions = remainingSessions.sort((a, b)=>a.updatedAt.getTime() - b.updatedAt.getTime());\n            const sessionsToDelete = sortedSessions.slice(0, remainingSessions.length - this.maxSessions);\n            for (const session of sessionsToDelete){\n                delete this.storage.sessions[session.id];\n                deletedCount++;\n            }\n        }\n        this.storage.metadata.lastCleanup = now.toISOString();\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        if (deletedCount > 0) {\n            await this.saveSessions();\n        }\n        return {\n            deletedCount\n        };\n    }\n    /**\n   * Get session statistics\n   */ getStatistics() {\n        const sessions = Object.values(this.storage.sessions);\n        const providerBreakdown = {\n            openai: 0,\n            deepseek: 0,\n            openrouter: 0\n        };\n        let totalMessages = 0;\n        sessions.forEach((session)=>{\n            providerBreakdown[session.provider]++;\n            totalMessages += session.messages.length;\n        });\n        return {\n            totalSessions: sessions.length,\n            lastCleanup: this.storage.metadata.lastCleanup,\n            providerBreakdown,\n            averageMessagesPerSession: sessions.length > 0 ? totalMessages / sessions.length : 0\n        };\n    }\n    /**\n   * Export chat history for backup\n   */ async exportChatHistory(options = {}) {\n        const { sessionIds, dateFrom, dateTo, includeSystemMessages = false } = options;\n        let sessions = Object.values(this.storage.sessions);\n        // Filter by session IDs if specified\n        if (sessionIds && sessionIds.length > 0) {\n            sessions = sessions.filter((session)=>sessionIds.includes(session.id));\n        }\n        // Filter by date range\n        if (dateFrom) {\n            sessions = sessions.filter((session)=>session.createdAt >= dateFrom);\n        }\n        if (dateTo) {\n            sessions = sessions.filter((session)=>session.createdAt <= dateTo);\n        }\n        // Filter messages if needed\n        const exportSessions = sessions.map((session)=>({\n                ...session,\n                messages: includeSystemMessages ? session.messages : session.messages.filter((msg)=>msg.role !== 'system')\n            }));\n        // Calculate metadata\n        const dates = exportSessions.map((s)=>s.createdAt).sort();\n        const earliest = dates.length > 0 ? dates[0].toISOString() : new Date().toISOString();\n        const latest = dates.length > 0 ? dates[dates.length - 1].toISOString() : new Date().toISOString();\n        return {\n            version: '1.0.0',\n            exportDate: new Date().toISOString(),\n            sessions: exportSessions,\n            metadata: {\n                totalSessions: exportSessions.length,\n                dateRange: {\n                    earliest,\n                    latest\n                }\n            }\n        };\n    }\n    /**\n   * Import chat history from backup\n   */ async importChatHistory(exportData, options = {}) {\n        const { overwriteExisting = false, generateNewIds = false } = options;\n        let imported = 0;\n        let skipped = 0;\n        const errors = [];\n        try {\n            if (exportData.version !== '1.0.0') {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Unsupported export version');\n            }\n            for (const session of exportData.sessions){\n                try {\n                    let sessionId = session.id;\n                    // Generate new ID if requested or if conflict exists\n                    if (generateNewIds || this.storage.sessions[sessionId] && !overwriteExisting) {\n                        sessionId = this.generateSessionId();\n                    }\n                    // Skip if session exists and not overwriting\n                    if (this.storage.sessions[sessionId] && !overwriteExisting) {\n                        skipped++;\n                        continue;\n                    }\n                    // Import session with new ID if needed\n                    const importedSession = {\n                        ...session,\n                        id: sessionId,\n                        // Ensure dates are Date objects\n                        createdAt: new Date(session.createdAt),\n                        updatedAt: new Date(session.updatedAt),\n                        messages: session.messages.map((msg)=>({\n                                ...msg,\n                                timestamp: new Date(msg.timestamp)\n                            }))\n                    };\n                    this.storage.sessions[sessionId] = importedSession;\n                    imported++;\n                } catch (error) {\n                    errors.push(`Failed to import session ${session.id}: ${error}`);\n                }\n            }\n            this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n            await this.saveSessions();\n            return {\n                imported,\n                skipped,\n                errors\n            };\n        } catch (error) {\n            console.error('Failed to import chat history:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to import chat history');\n        }\n    }\n    /**\n   * Secure cleanup - permanently delete sessions and clear sensitive data\n   */ async secureCleanup(options = {}) {\n        const { olderThanDays = 30, sessionIds, clearAllSensitiveData = false } = options;\n        let deletedSessions = 0;\n        const now = new Date();\n        const maxAge = olderThanDays * 24 * 60 * 60 * 1000;\n        // Delete specific sessions if provided\n        if (sessionIds && sessionIds.length > 0) {\n            for (const sessionId of sessionIds){\n                if (this.storage.sessions[sessionId]) {\n                    delete this.storage.sessions[sessionId];\n                    deletedSessions++;\n                }\n            }\n        } else {\n            // Delete old sessions\n            const sessions = Object.values(this.storage.sessions);\n            const oldSessions = sessions.filter((session)=>now.getTime() - session.updatedAt.getTime() > maxAge);\n            for (const session of oldSessions){\n                delete this.storage.sessions[session.id];\n                deletedSessions++;\n            }\n        }\n        // Clear sensitive data from remaining sessions if requested\n        let clearedData = false;\n        if (clearAllSensitiveData) {\n            Object.values(this.storage.sessions).forEach((session)=>{\n                session.messages = session.messages.map((message)=>({\n                        ...message,\n                        // Remove any potential sensitive content patterns\n                        content: this.sanitizeMessageContent(message.content)\n                    }));\n            });\n            clearedData = true;\n        }\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        this.storage.metadata.lastCleanup = now.toISOString();\n        await this.saveSessions();\n        return {\n            deletedSessions,\n            clearedData\n        };\n    }\n    /**\n   * Get privacy and security statistics\n   */ getPrivacyStatistics() {\n        const sessions = Object.values(this.storage.sessions);\n        const now = new Date();\n        if (sessions.length === 0) {\n            return {\n                totalSessions: 0,\n                totalMessages: 0,\n                oldestSession: null,\n                newestSession: null,\n                averageSessionAge: 0,\n                sessionsWithSensitiveData: 0,\n                lastCleanup: this.storage.metadata.lastCleanup\n            };\n        }\n        const sortedByDate = sessions.sort((a, b)=>a.createdAt.getTime() - b.createdAt.getTime());\n        const totalMessages = sessions.reduce((sum, session)=>sum + session.messages.length, 0);\n        const totalAge = sessions.reduce((sum, session)=>sum + (now.getTime() - session.createdAt.getTime()), 0);\n        const averageSessionAge = totalAge / sessions.length / (24 * 60 * 60 * 1000); // in days\n        // Count sessions that might contain sensitive data (API keys, tokens, etc.)\n        const sensitivePatterns = [\n            /api[_-]?key/i,\n            /token/i,\n            /secret/i,\n            /password/i\n        ];\n        const sessionsWithSensitiveData = sessions.filter((session)=>session.messages.some((message)=>sensitivePatterns.some((pattern)=>pattern.test(message.content)))).length;\n        return {\n            totalSessions: sessions.length,\n            totalMessages,\n            oldestSession: sortedByDate[0].createdAt.toISOString(),\n            newestSession: sortedByDate[sortedByDate.length - 1].createdAt.toISOString(),\n            averageSessionAge,\n            sessionsWithSensitiveData,\n            lastCleanup: this.storage.metadata.lastCleanup\n        };\n    }\n    /**\n   * Shutdown the session manager\n   */ async shutdown() {\n        if (this.cleanupTimer) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = undefined;\n        }\n        await this.saveSessions();\n    }\n    // Private methods\n    generateSessionId() {\n        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    generateFallbackTitle(session) {\n        const userMessages = session.messages.filter((msg)=>msg.role === 'user');\n        if (userMessages.length > 0) {\n            const originalMessage = userMessages[0].content;\n            const truncatedMessage = originalMessage.substring(0, 40);\n            return originalMessage.length > 40 ? `${truncatedMessage}...` : truncatedMessage;\n        }\n        const date = session.createdAt.toLocaleDateString();\n        return `Chat from ${date}`;\n    }\n    async ensureStorageDirectory() {\n        try {\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.mkdir(this.storageDir, {\n                recursive: true\n            });\n        } catch (error) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError(`Failed to create storage directory: ${error}`);\n        }\n    }\n    async loadSessions() {\n        try {\n            const data = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(this.storageFile, 'utf-8');\n            const parsed = JSON.parse(data);\n            // Convert date strings back to Date objects\n            Object.values(parsed.sessions).forEach((session)=>{\n                session.createdAt = new Date(session.createdAt);\n                session.updatedAt = new Date(session.updatedAt);\n                session.messages.forEach((message)=>{\n                    message.timestamp = new Date(message.timestamp);\n                });\n            });\n            this.storage = parsed;\n        } catch (error) {\n            if (error.code === 'ENOENT') {\n                // File doesn't exist, start with empty storage\n                this.storage = {\n                    sessions: {},\n                    metadata: {\n                        lastCleanup: new Date().toISOString(),\n                        totalSessions: 0,\n                        version: '1.0.0',\n                        encrypted: false\n                    }\n                };\n                await this.saveSessions();\n            } else {\n                console.error('Failed to load sessions:', error);\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to load session data');\n            }\n        }\n    }\n    async saveSessions() {\n        try {\n            const data = JSON.stringify(this.storage, null, 2);\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile(this.storageFile, data, 'utf-8');\n        } catch (error) {\n            console.error('Failed to save sessions:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to save session data');\n        }\n    }\n    startCleanupTimer() {\n        this.cleanupTimer = setInterval(async ()=>{\n            try {\n                await this.cleanupSessions();\n            } catch (error) {\n                console.error('Automatic cleanup failed:', error);\n            }\n        }, this.cleanupIntervalMs);\n    }\n    sanitizeMessageContent(content) {\n        // Remove potential API keys, tokens, and other sensitive data\n        const sensitivePatterns = [\n            /sk-[a-zA-Z0-9]{20,}/g,\n            /sk-or-[a-zA-Z0-9]{30,}/g,\n            /Bearer\\s+[a-zA-Z0-9]{20,}/g,\n            /[a-zA-Z0-9]{32,}/g\n        ];\n        let sanitized = content;\n        sensitivePatterns.forEach((pattern)=>{\n            sanitized = sanitized.replace(pattern, '[REDACTED]');\n        });\n        return sanitized;\n    }\n}\n// Singleton instance\nlet sessionManagerInstance = null;\nfunction getSessionManager() {\n    if (!sessionManagerInstance) {\n        sessionManagerInstance = new SessionManager();\n    }\n    return sessionManagerInstance;\n}\nasync function initializeSessionManager() {\n    const manager = getSessionManager();\n    await manager.initialize();\n    return manager;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/SessionManager.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/crypto-js"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();